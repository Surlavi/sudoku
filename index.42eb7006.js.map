{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-c2fa80e1d6d002b8.js","build/src/main.js","src/main.ts","wasm/pkg/sudoku_wasm.js","node_modules/@parcel/runtime-js/lib/runtime-503292a6c0a3d230.js","build/src/theme.js","src/theme.ts","build/src/types.js","src/types.ts","build/src/game_controller.js","src/game_controller.ts","build/src/board_ui.js","src/board_ui.ts","build/src/game.js","src/game.ts","build/src/solve.js","src/solve.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error('Could not resolve bundle with id ' + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $cd27bad30c1f38b4$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse(\"[\\\"f7twW\\\",\\\"index.42eb7006.js\\\",\\\"8uHta\\\",\\\"sudoku_wasm_bg.e453e396.wasm\\\"]\"));\n\nlet $fb6cc04260f9a749$var$wasm;\nfunction $fb6cc04260f9a749$var$addToExternrefTable0(obj) {\n    const idx = $fb6cc04260f9a749$var$wasm.__externref_table_alloc();\n    $fb6cc04260f9a749$var$wasm.__wbindgen_export_2.set(idx, obj);\n    return idx;\n}\nfunction $fb6cc04260f9a749$var$handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = $fb6cc04260f9a749$var$addToExternrefTable0(e);\n        $fb6cc04260f9a749$var$wasm.__wbindgen_exn_store(idx);\n    }\n}\nconst $fb6cc04260f9a749$var$cachedTextDecoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', {\n    ignoreBOM: true,\n    fatal: true\n}) : {\n    decode: ()=>{\n        throw Error('TextDecoder not available');\n    }\n};\nif (typeof TextDecoder !== 'undefined') $fb6cc04260f9a749$var$cachedTextDecoder.decode();\nlet $fb6cc04260f9a749$var$cachedUint8ArrayMemory0 = null;\nfunction $fb6cc04260f9a749$var$getUint8ArrayMemory0() {\n    if ($fb6cc04260f9a749$var$cachedUint8ArrayMemory0 === null || $fb6cc04260f9a749$var$cachedUint8ArrayMemory0.byteLength === 0) $fb6cc04260f9a749$var$cachedUint8ArrayMemory0 = new Uint8Array($fb6cc04260f9a749$var$wasm.memory.buffer);\n    return $fb6cc04260f9a749$var$cachedUint8ArrayMemory0;\n}\nfunction $fb6cc04260f9a749$var$getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return $fb6cc04260f9a749$var$cachedTextDecoder.decode($fb6cc04260f9a749$var$getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\nlet $fb6cc04260f9a749$var$WASM_VECTOR_LEN = 0;\nconst $fb6cc04260f9a749$var$cachedTextEncoder = typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : {\n    encode: ()=>{\n        throw Error('TextEncoder not available');\n    }\n};\nconst $fb6cc04260f9a749$var$encodeString = typeof $fb6cc04260f9a749$var$cachedTextEncoder.encodeInto === 'function' ? function(arg, view) {\n    return $fb6cc04260f9a749$var$cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n    const buf = $fb6cc04260f9a749$var$cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\nfunction $fb6cc04260f9a749$var$passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = $fb6cc04260f9a749$var$cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        $fb6cc04260f9a749$var$getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        $fb6cc04260f9a749$var$WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n    const mem = $fb6cc04260f9a749$var$getUint8ArrayMemory0();\n    let offset = 0;\n    for(; offset < len; offset++){\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) arg = arg.slice(offset);\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = $fb6cc04260f9a749$var$getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = $fb6cc04260f9a749$var$encodeString(arg, view);\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n    $fb6cc04260f9a749$var$WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet $fb6cc04260f9a749$var$cachedDataViewMemory0 = null;\nfunction $fb6cc04260f9a749$var$getDataViewMemory0() {\n    if ($fb6cc04260f9a749$var$cachedDataViewMemory0 === null || $fb6cc04260f9a749$var$cachedDataViewMemory0.buffer.detached === true || $fb6cc04260f9a749$var$cachedDataViewMemory0.buffer.detached === undefined && $fb6cc04260f9a749$var$cachedDataViewMemory0.buffer !== $fb6cc04260f9a749$var$wasm.memory.buffer) $fb6cc04260f9a749$var$cachedDataViewMemory0 = new DataView($fb6cc04260f9a749$var$wasm.memory.buffer);\n    return $fb6cc04260f9a749$var$cachedDataViewMemory0;\n}\nfunction $fb6cc04260f9a749$var$isLikeNone(x) {\n    return x === undefined || x === null;\n}\nfunction $fb6cc04260f9a749$var$getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return $fb6cc04260f9a749$var$getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction $fb6cc04260f9a749$export$ede763ccc882b3e5() {\n    $fb6cc04260f9a749$var$wasm.init_panic_hook();\n}\nfunction $fb6cc04260f9a749$var$passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    $fb6cc04260f9a749$var$getUint8ArrayMemory0().set(arg, ptr / 1);\n    $fb6cc04260f9a749$var$WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction $fb6cc04260f9a749$var$takeFromExternrefTable0(idx) {\n    const value = $fb6cc04260f9a749$var$wasm.__wbindgen_export_2.get(idx);\n    $fb6cc04260f9a749$var$wasm.__externref_table_dealloc(idx);\n    return value;\n}\nfunction $fb6cc04260f9a749$export$732a70cc09cae898(board) {\n    var ptr0 = $fb6cc04260f9a749$var$passArray8ToWasm0(board, $fb6cc04260f9a749$var$wasm.__wbindgen_malloc);\n    var len0 = $fb6cc04260f9a749$var$WASM_VECTOR_LEN;\n    const ret = $fb6cc04260f9a749$var$wasm.fast_solve(ptr0, len0, board);\n    if (ret[2]) throw $fb6cc04260f9a749$var$takeFromExternrefTable0(ret[1]);\n    return ret[0] >>> 0;\n}\nfunction $fb6cc04260f9a749$export$80d376111cc09ad7(non_empty_cnt, output_puzzle) {\n    var ptr0 = $fb6cc04260f9a749$var$passArray8ToWasm0(output_puzzle, $fb6cc04260f9a749$var$wasm.__wbindgen_malloc);\n    var len0 = $fb6cc04260f9a749$var$WASM_VECTOR_LEN;\n    $fb6cc04260f9a749$var$wasm.generate(non_empty_cnt, ptr0, len0, output_puzzle);\n}\nasync function $fb6cc04260f9a749$var$__wbg_load(module1, imports) {\n    if (typeof Response === 'function' && module1 instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') try {\n            return await WebAssembly.instantiateStreaming(module1, imports);\n        } catch (e) {\n            if (module1.headers.get('Content-Type') != 'application/wasm') console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n            else throw e;\n        }\n        const bytes = await module1.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    } else {\n        const instance = await WebAssembly.instantiate(module1, imports);\n        if (instance instanceof WebAssembly.Instance) return {\n            instance: instance,\n            module: module1\n        };\n        else return instance;\n    }\n}\nfunction $fb6cc04260f9a749$var$__wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_buffer_61b7ce01341d7f88 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_call_500db948e69c7330 = function() {\n        return $fb6cc04260f9a749$var$handleError(function(arg0, arg1, arg2) {\n            const ret = arg0.call(arg1, arg2);\n            return ret;\n        }, arguments);\n    };\n    imports.wbg.__wbg_call_b0d8e36992d9900d = function() {\n        return $fb6cc04260f9a749$var$handleError(function(arg0, arg1) {\n            const ret = arg0.call(arg1);\n            return ret;\n        }, arguments);\n    };\n    imports.wbg.__wbg_crypto_ed58b8e10a292839 = function(arg0) {\n        const ret = arg0.crypto;\n        return ret;\n    };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error($fb6cc04260f9a749$var$getStringFromWasm0(arg0, arg1));\n        } finally{\n            $fb6cc04260f9a749$var$wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_getRandomValues_bcb4912f16000dc4 = function() {\n        return $fb6cc04260f9a749$var$handleError(function(arg0, arg1) {\n            arg0.getRandomValues(arg1);\n        }, arguments);\n    };\n    imports.wbg.__wbg_msCrypto_0a36e2ec3a343d26 = function(arg0) {\n        const ret = arg0.msCrypto;\n        return ret;\n    };\n    imports.wbg.__wbg_new_3ff5b33b1ce712df = function(arg0) {\n        const ret = new Uint8Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_fd9e4bf8be2bc16d = function(arg0, arg1) {\n        const ret = new Function($fb6cc04260f9a749$var$getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_ba35896968751d91 = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_34ce8f1051e74449 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_node_02999533c4ea02e3 = function(arg0) {\n        const ret = arg0.node;\n        return ret;\n    };\n    imports.wbg.__wbg_now_2c95c9de01293173 = function(arg0) {\n        const ret = arg0.now();\n        return ret;\n    };\n    imports.wbg.__wbg_performance_7a3ffd0b17f663ad = function(arg0) {\n        const ret = arg0.performance;\n        return ret;\n    };\n    imports.wbg.__wbg_process_5c1d670bc53614b8 = function(arg0) {\n        const ret = arg0.process;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_ab2cfe79ebbf2740 = function() {\n        return $fb6cc04260f9a749$var$handleError(function(arg0, arg1) {\n            arg0.randomFillSync(arg1);\n        }, arguments);\n    };\n    imports.wbg.__wbg_require_79b1e9274cde3c87 = function() {\n        return $fb6cc04260f9a749$var$handleError(function() {\n            const ret = module.require;\n            return ret;\n        }, arguments);\n    };\n    imports.wbg.__wbg_set_23d69db4e5c66a6e = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = $fb6cc04260f9a749$var$passStringToWasm0(ret, $fb6cc04260f9a749$var$wasm.__wbindgen_malloc, $fb6cc04260f9a749$var$wasm.__wbindgen_realloc);\n        const len1 = $fb6cc04260f9a749$var$WASM_VECTOR_LEN;\n        $fb6cc04260f9a749$var$getDataViewMemory0().setInt32(arg0 + 4, len1, true);\n        $fb6cc04260f9a749$var$getDataViewMemory0().setInt32(arg0 + 0, ptr1, true);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_0be7472e492ad3e3 = function() {\n        const ret = typeof $parcel$global === 'undefined' ? null : $parcel$global;\n        return $fb6cc04260f9a749$var$isLikeNone(ret) ? 0 : $fb6cc04260f9a749$var$addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb = function() {\n        const ret = typeof globalThis === 'undefined' ? null : globalThis;\n        return $fb6cc04260f9a749$var$isLikeNone(ret) ? 0 : $fb6cc04260f9a749$var$addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_SELF_1dc398a895c82351 = function() {\n        const ret = typeof self === 'undefined' ? null : self;\n        return $fb6cc04260f9a749$var$isLikeNone(ret) ? 0 : $fb6cc04260f9a749$var$addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_WINDOW_ae1c80c7eea8d64a = function() {\n        const ret = typeof window === 'undefined' ? null : window;\n        return $fb6cc04260f9a749$var$isLikeNone(ret) ? 0 : $fb6cc04260f9a749$var$addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_subarray_46adeb9b86949d12 = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_versions_c71aa1626a93e0a1 = function(arg0) {\n        const ret = arg0.versions;\n        return ret;\n    };\n    imports.wbg.__wbindgen_copy_to_typed_array = function(arg0, arg1, arg2) {\n        new Uint8Array(arg2.buffer, arg2.byteOffset, arg2.byteLength).set($fb6cc04260f9a749$var$getArrayU8FromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error($fb6cc04260f9a749$var$getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = $fb6cc04260f9a749$var$wasm.__wbindgen_export_2;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof arg0 === 'function';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = arg0;\n        const ret = typeof val === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof arg0 === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = arg0 === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = $fb6cc04260f9a749$var$wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = $fb6cc04260f9a749$var$getStringFromWasm0(arg0, arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error($fb6cc04260f9a749$var$getStringFromWasm0(arg0, arg1));\n    };\n    return imports;\n}\nfunction $fb6cc04260f9a749$var$__wbg_init_memory(imports, memory) {}\nfunction $fb6cc04260f9a749$var$__wbg_finalize_init(instance, module1) {\n    $fb6cc04260f9a749$var$wasm = instance.exports;\n    $fb6cc04260f9a749$var$__wbg_init.__wbindgen_wasm_module = module1;\n    $fb6cc04260f9a749$var$cachedDataViewMemory0 = null;\n    $fb6cc04260f9a749$var$cachedUint8ArrayMemory0 = null;\n    $fb6cc04260f9a749$var$wasm.__wbindgen_start();\n    return $fb6cc04260f9a749$var$wasm;\n}\nfunction $fb6cc04260f9a749$export$2ec80ee76a9348bf(module1) {\n    if ($fb6cc04260f9a749$var$wasm !== undefined) return $fb6cc04260f9a749$var$wasm;\n    if (typeof module1 !== 'undefined') {\n        if (Object.getPrototypeOf(module1) === Object.prototype) ({ module: module1 } = module1);\n        else console.warn('using deprecated parameters for `initSync()`; pass a single object instead');\n    }\n    const imports = $fb6cc04260f9a749$var$__wbg_get_imports();\n    $fb6cc04260f9a749$var$__wbg_init_memory(imports);\n    if (!(module1 instanceof WebAssembly.Module)) module1 = new WebAssembly.Module(module1);\n    const instance = new WebAssembly.Instance(module1, imports);\n    return $fb6cc04260f9a749$var$__wbg_finalize_init(instance, module1);\n}\nvar $9098339d50778e43$exports = {};\n$9098339d50778e43$exports = new URL(\"sudoku_wasm_bg.e453e396.wasm\", import.meta.url).toString();\n\n\nasync function $fb6cc04260f9a749$var$__wbg_init(module_or_path) {\n    if ($fb6cc04260f9a749$var$wasm !== undefined) return $fb6cc04260f9a749$var$wasm;\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) ({ module_or_path: module_or_path } = module_or_path);\n        else console.warn('using deprecated parameters for the initialization function; pass a single object instead');\n    }\n    if (typeof module_or_path === 'undefined') module_or_path = new URL($9098339d50778e43$exports);\n    const imports = $fb6cc04260f9a749$var$__wbg_get_imports();\n    if (typeof module_or_path === 'string' || typeof Request === 'function' && module_or_path instanceof Request || typeof URL === 'function' && module_or_path instanceof URL) module_or_path = fetch(module_or_path);\n    $fb6cc04260f9a749$var$__wbg_init_memory(imports);\n    const { instance: instance, module: module1 } = await $fb6cc04260f9a749$var$__wbg_load(await module_or_path, imports);\n    return $fb6cc04260f9a749$var$__wbg_finalize_init(instance, module1);\n}\nvar $fb6cc04260f9a749$export$2e2bcd8739ae039 = $fb6cc04260f9a749$var$__wbg_init;\n\n\nconst $f360512a3c30bea8$var$CURRENT_THEME = {\n    colorPrefilled: '#050505',\n    colorSolved: '#156363',\n    colorDraft: '#447862',\n    colorHighlightFg: '#007896',\n    colorHighlightBg1: $f360512a3c30bea8$var$rgba('#dcc1c3', 1),\n    colorHighlightBg2: $f360512a3c30bea8$var$rgba('#dcd1d1', 0.5),\n    colorBg: '#fefefe'\n};\nfunction $f360512a3c30bea8$export$3bfd0d5209a8006a() {\n    return $f360512a3c30bea8$var$CURRENT_THEME;\n}\nfunction $f360512a3c30bea8$var$rgba(hex, alpha) {\n    hex = hex.replace('#', '');\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\nconst $f360512a3c30bea8$var$CSS_JS_VAR_MAP = {\n    'color-prefilled': 'colorPrefilled',\n    'color-solved': 'colorSolved',\n    'color-draft': 'colorDraft',\n    'color-highlight-fg': 'colorHighlightFg',\n    'color-highlight-bg1': 'colorHighlightBg1',\n    'color-highlight-bg2': 'colorHighlightBg2',\n    'color-bg': 'colorBg'\n};\nfunction $f360512a3c30bea8$export$2cd8252107eb640b() {\n    $f360512a3c30bea8$var$setTheme('default');\n}\nfunction $f360512a3c30bea8$var$setTheme(name) {\n    for(const cssProp in $f360512a3c30bea8$var$CSS_JS_VAR_MAP){\n        const jsProp = $f360512a3c30bea8$var$CSS_JS_VAR_MAP[cssProp];\n        const cssVar = `--${name}-${cssProp}`;\n        const val = window.getComputedStyle(document.body).getPropertyValue(cssVar);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        $f360512a3c30bea8$var$CURRENT_THEME[jsProp] = val;\n        document.documentElement.style.setProperty(`--${cssProp}`, val);\n    }\n}\n\n\nconst $c02655ebd8daba6d$export$f620cea8bc0acc40 = 9;\nconst $c02655ebd8daba6d$export$7331fb0f7c654bd8 = $c02655ebd8daba6d$export$f620cea8bc0acc40 * $c02655ebd8daba6d$export$f620cea8bc0acc40;\nconst $c02655ebd8daba6d$var$CHAR_FOR_EMPTY_CELL = '.';\nconst $c02655ebd8daba6d$var$NUMBER_FOR_EMPTY_CELL = 0;\nfunction $c02655ebd8daba6d$var$assertIndexInRange(value, desc) {\n    if (!Number.isInteger(value) || value < 0 || value >= $c02655ebd8daba6d$export$f620cea8bc0acc40) throw new RangeError(`Invalid ${desc}: ${value}`);\n}\nfunction $c02655ebd8daba6d$var$assertCellValueInRange(value) {\n    if (!Number.isInteger(value) || value < 1 || value > $c02655ebd8daba6d$export$f620cea8bc0acc40) throw new RangeError(`Invalid cell value: ${value}`);\n}\nclass $c02655ebd8daba6d$var$CellValueSet {\n    bitmap;\n    constructor(initValue = false){\n        this.bitmap = new Array($c02655ebd8daba6d$export$f620cea8bc0acc40 + 1).fill(initValue);\n    }\n    clone() {\n        const ret = new $c02655ebd8daba6d$var$CellValueSet();\n        for(let i = 0; i < this.bitmap.length; i++)ret.bitmap[i] = this.bitmap[i];\n        return ret;\n    }\n    add(value) {\n        this.bitmap[value] = true;\n        return this;\n    }\n    delete(value) {\n        const ret = this.bitmap[value];\n        this.bitmap[value] = false;\n        return ret;\n    }\n    has(value) {\n        return this.bitmap[value];\n    }\n    clear() {\n        this.bitmap.fill(false);\n    }\n    addAll() {\n        this.bitmap.fill(true);\n    }\n    hasAll() {\n        for(let i = 1; i <= $c02655ebd8daba6d$export$f620cea8bc0acc40; i++){\n            if (!this.bitmap[i]) return false;\n        }\n        return true;\n    }\n    getUnique() {\n        let ret = null;\n        for(let i = 1; i <= $c02655ebd8daba6d$export$f620cea8bc0acc40; i++){\n            if (!this.bitmap[i]) continue;\n            if (ret === null) ret = i;\n            else return null;\n        }\n        return ret;\n    }\n    toString() {\n        let ret = '';\n        for(let i = 1; i <= $c02655ebd8daba6d$export$f620cea8bc0acc40; i++)if (this.bitmap[i]) ret += `${i} `;\n        return ret + `: ${this.getUnique()}`;\n    }\n}\nclass $c02655ebd8daba6d$export$d6e0f5996cc55599 {\n    x;\n    y;\n    linearIndex;\n    squareIndex;\n    constructor(x, y){\n        $c02655ebd8daba6d$var$assertIndexInRange(x, 'x');\n        $c02655ebd8daba6d$var$assertIndexInRange(y, 'y');\n        this.x = x;\n        this.y = y;\n        this.linearIndex = x + y * $c02655ebd8daba6d$export$f620cea8bc0acc40;\n        this.squareIndex = Math.floor(x / 3) + Math.floor(y / 3) * 3;\n    }\n    static fromLinearIndex(i) {\n        return new $c02655ebd8daba6d$export$d6e0f5996cc55599(i % $c02655ebd8daba6d$export$f620cea8bc0acc40, Math.floor(i / $c02655ebd8daba6d$export$f620cea8bc0acc40));\n    }\n    toString() {\n        return `(x: ${this.x}, y: ${this.y}, square: ${this.squareIndex})`;\n    }\n}\nclass $c02655ebd8daba6d$export$f6f0c3fe4ec306ea {\n    coordinate;\n    value;\n    constructor(coordinate, value){\n        if (value !== null) $c02655ebd8daba6d$var$assertCellValueInRange(value);\n        this.coordinate = coordinate;\n        this.value = value;\n    }\n    toChar() {\n        return this.value === null ? $c02655ebd8daba6d$var$CHAR_FOR_EMPTY_CELL : this.value.toString();\n    }\n    static fromChar(coordinate, char) {\n        if (char === $c02655ebd8daba6d$var$CHAR_FOR_EMPTY_CELL) return new $c02655ebd8daba6d$export$f6f0c3fe4ec306ea(coordinate, null);\n        return new $c02655ebd8daba6d$export$f6f0c3fe4ec306ea(coordinate, parseInt(char));\n    }\n    static fromNumber(coordinate, val) {\n        if (val === $c02655ebd8daba6d$var$NUMBER_FOR_EMPTY_CELL) return new $c02655ebd8daba6d$export$f6f0c3fe4ec306ea(coordinate, null);\n        return new $c02655ebd8daba6d$export$f6f0c3fe4ec306ea(coordinate, val);\n    }\n}\nfunction $c02655ebd8daba6d$export$ca6ef7ad567c0803(cells) {\n    return cells.map((cell)=>cell.toChar()).join('');\n}\nfunction $c02655ebd8daba6d$export$da037351fcfc0321(cells, strict = false) {\n    if (cells.length !== $c02655ebd8daba6d$export$f620cea8bc0acc40) throw new Error(`Got cell size ${cells.length}, want ${$c02655ebd8daba6d$export$f620cea8bc0acc40}`);\n    const values = new $c02655ebd8daba6d$var$CellValueSet();\n    for (const cell of cells){\n        if (cell.value === null) continue;\n        if (values.has(cell.value)) return false;\n    }\n    return !strict || values.hasAll();\n}\nvar $c02655ebd8daba6d$export$50932e179583d398;\n(function(SolvingCellState) {\n    SolvingCellState[\"PREFILLED\"] = \"Prefilled\";\n    SolvingCellState[\"SOLVING\"] = \"Solving\";\n    SolvingCellState[\"SOLVED\"] = \"Solved\";\n})($c02655ebd8daba6d$export$50932e179583d398 || ($c02655ebd8daba6d$export$50932e179583d398 = {}));\nclass $c02655ebd8daba6d$export$631497b75d3af52d extends $c02655ebd8daba6d$export$f6f0c3fe4ec306ea {\n    state;\n    draftNumbers;\n    static newPrefilled(coordinate, value) {\n        return new $c02655ebd8daba6d$export$631497b75d3af52d(coordinate, $c02655ebd8daba6d$export$50932e179583d398.PREFILLED, value);\n    }\n    static newSolving(coordinate) {\n        return new $c02655ebd8daba6d$export$631497b75d3af52d(coordinate, $c02655ebd8daba6d$export$50932e179583d398.SOLVING, null);\n    }\n    constructor(coordinate, state, value){\n        super(coordinate, value);\n        this.state = state;\n        this.draftNumbers = new $c02655ebd8daba6d$var$CellValueSet(false);\n    }\n    clone() {\n        const ret = new $c02655ebd8daba6d$export$631497b75d3af52d(this.coordinate, this.state, this.value);\n        ret.draftNumbers = this.draftNumbers.clone();\n        return ret;\n    }\n    hasNumber() {\n        switch(this.state){\n            case $c02655ebd8daba6d$export$50932e179583d398.PREFILLED:\n            case $c02655ebd8daba6d$export$50932e179583d398.SOLVED:\n                return true;\n            case $c02655ebd8daba6d$export$50932e179583d398.SOLVING:\n                return false;\n        }\n    }\n    addAllDraftNumber() {\n        for(let i = 1; i <= $c02655ebd8daba6d$export$f620cea8bc0acc40; i++)this.draftNumbers.add(i);\n    }\n    hasDraftNumber(value) {\n        return this.draftNumbers.has(value);\n    }\n    addDraftNumber(value) {\n        this.draftNumbers.add(value);\n    }\n    removeDraftNumber(value) {\n        this.draftNumbers.delete(value);\n    }\n    fillNumber(value) {\n        $c02655ebd8daba6d$var$assertCellValueInRange(value);\n        this.value = value;\n        this.draftNumbers.clear();\n        this.state = $c02655ebd8daba6d$export$50932e179583d398.SOLVED;\n    }\n    toString() {\n        return `${this.coordinate} state: ${this.state}, possibleValues: ${this.draftNumbers}`;\n    }\n}\nclass $c02655ebd8daba6d$export$3ca9368aae595c1d {\n    cells;\n    constructor(cells){\n        for(let i = 0; i < $c02655ebd8daba6d$export$7331fb0f7c654bd8; i++){\n            if (cells[i].coordinate.linearIndex !== i) throw new Error(`Invalid cell ${cells[i]}`);\n        }\n        this.cells = cells;\n    }\n    static createBoardFromString(chars) {\n        // Drop all empty chars.\n        chars = chars.replace(/\\s/g, '');\n        if (chars.length !== $c02655ebd8daba6d$export$7331fb0f7c654bd8) throw new Error(`Input char length ${chars.length}, want ${$c02655ebd8daba6d$export$7331fb0f7c654bd8}`);\n        const cells = new Array();\n        for(let i = 0; i < $c02655ebd8daba6d$export$7331fb0f7c654bd8; i++)cells.push($c02655ebd8daba6d$export$f6f0c3fe4ec306ea.fromChar($c02655ebd8daba6d$export$d6e0f5996cc55599.fromLinearIndex(i), chars[i]));\n        return new $c02655ebd8daba6d$export$3ca9368aae595c1d(cells);\n    }\n    static createBoardFromUint8Array(numbers) {\n        if (numbers.length !== $c02655ebd8daba6d$export$7331fb0f7c654bd8) throw new Error(`Input char length ${numbers.length}, want ${$c02655ebd8daba6d$export$7331fb0f7c654bd8}`);\n        const cells = new Array();\n        for(let i = 0; i < $c02655ebd8daba6d$export$7331fb0f7c654bd8; i++)cells.push($c02655ebd8daba6d$export$f6f0c3fe4ec306ea.fromNumber($c02655ebd8daba6d$export$d6e0f5996cc55599.fromLinearIndex(i), numbers[i]));\n        return new $c02655ebd8daba6d$export$3ca9368aae595c1d(cells);\n    }\n    printBoard() {\n        let ret = '';\n        for(let i = 0; i < $c02655ebd8daba6d$export$7331fb0f7c654bd8; i++){\n            ret += this.cells[i].toChar();\n            if (i % $c02655ebd8daba6d$export$f620cea8bc0acc40 === $c02655ebd8daba6d$export$f620cea8bc0acc40 - 1) ret += '\\n';\n        }\n        return ret;\n    }\n    getCellByCoord(coord) {\n        return this.cells[coord.linearIndex];\n    }\n    getCellsByRow(rowIndex) {\n        $c02655ebd8daba6d$var$assertIndexInRange(rowIndex, 'rowIndex');\n        const ret = new Array();\n        for(let i = 0; i < $c02655ebd8daba6d$export$f620cea8bc0acc40; i++)ret.push(this.cells[rowIndex * $c02655ebd8daba6d$export$f620cea8bc0acc40 + i]);\n        return ret;\n    }\n    getCellsByColumn(columnIndex) {\n        $c02655ebd8daba6d$var$assertIndexInRange(columnIndex, 'columnIndex');\n        const ret = new Array();\n        for(let i = 0; i < $c02655ebd8daba6d$export$f620cea8bc0acc40; i++)ret.push(this.cells[i * $c02655ebd8daba6d$export$f620cea8bc0acc40 + columnIndex]);\n        return ret;\n    }\n    getCellsBySquare(squareIndex) {\n        $c02655ebd8daba6d$var$assertIndexInRange(squareIndex, 'squareIndex');\n        return this.cells.filter((cell)=>cell.coordinate.squareIndex === squareIndex);\n    }\n    getCellsByNeighborToCoord(coord) {\n        return $c02655ebd8daba6d$export$2b07a0b5dadde1bc([\n            this.getCellsByColumn(coord.x),\n            this.getCellsByRow(coord.y),\n            this.getCellsBySquare(coord.squareIndex)\n        ]);\n    }\n    validate(strict) {\n        for(let i = 0; i < $c02655ebd8daba6d$export$f620cea8bc0acc40; i++){\n            if (!$c02655ebd8daba6d$export$da037351fcfc0321(this.getCellsByRow(i), strict)) return false;\n            if (!$c02655ebd8daba6d$export$da037351fcfc0321(this.getCellsByColumn(i), strict)) return false;\n            if (!$c02655ebd8daba6d$export$da037351fcfc0321(this.getCellsBySquare(i), strict)) return false;\n        }\n        return true;\n    }\n}\nfunction $c02655ebd8daba6d$export$2b07a0b5dadde1bc(arrays) {\n    const seen = new Set();\n    const merged = [];\n    for (const arr of arrays){\n        if (arr) for (const cell of arr){\n            if (cell) {\n                if (!seen.has(cell)) {\n                    seen.add(cell);\n                    merged.push(cell);\n                }\n            }\n        }\n    }\n    return merged;\n}\n\n\n\n\nfunction $264de1acac9b7e95$var$drawLine(ctx, x1, y1, x2, y2, style) {\n    ctx.strokeStyle = style.color;\n    ctx.lineWidth = style.width ? style.width : 1;\n    // Square is better for drawing border of the grid.\n    ctx.lineCap = 'square';\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\nfunction $264de1acac9b7e95$var$getCanvas2DContext(canvas) {\n    return canvas.getContext('2d');\n}\nfunction $264de1acac9b7e95$var$clearCanvas(canvas) {\n    const ctx = $264de1acac9b7e95$var$getCanvas2DContext(canvas);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\nvar $264de1acac9b7e95$export$cc1a246adca07dd4;\n(function(MoveDirection) {\n    MoveDirection[MoveDirection[\"UP\"] = 0] = \"UP\";\n    MoveDirection[MoveDirection[\"DOWN\"] = 1] = \"DOWN\";\n    MoveDirection[MoveDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n    MoveDirection[MoveDirection[\"LEFT\"] = 3] = \"LEFT\";\n})($264de1acac9b7e95$export$cc1a246adca07dd4 || ($264de1acac9b7e95$export$cc1a246adca07dd4 = {}));\nconst $264de1acac9b7e95$var$CANVAS_MARGIN = 5;\nconst $264de1acac9b7e95$var$VIRTUAL_KB_HTML = `\n<div id=\"draft-mode-line\">\n  <label class=\"switch\">\n    <input type=\"checkbox\" id=\"kb-draft-mode-switch\" checked=\"true\">\n    <span class=\"slider\"></span>\n  </label>\n  <span>Draft mode</span>\n</div>\n<div div class=\"keyboard\" id=\"keyboard\"></div>\n`;\nconst $264de1acac9b7e95$var$VIRTUAL_KEYBOARD_ID = 'num-keyboard';\n// Shows a keyboard for inputting digits for the Sudoku game.\nclass $264de1acac9b7e95$var$VirtualKeyboard {\n    cb;\n    container;\n    width;\n    height;\n    constructor(parent, keyInputCallback){\n        this.container = document.createElement('div');\n        this.container.id = $264de1acac9b7e95$var$VIRTUAL_KEYBOARD_ID;\n        parent.appendChild(this.container);\n        this.container.setHTMLUnsafe($264de1acac9b7e95$var$VIRTUAL_KB_HTML);\n        this.container.classList.add('fading-fast');\n        this.cb = keyInputCallback;\n        const keyboard = document.getElementById('keyboard');\n        const keyboardDraftModeSwitch = document.getElementById('kb-draft-mode-switch');\n        for(let i = 1; i <= 9; i++){\n            const key = document.createElement('div');\n            key.classList.add('key');\n            key.classList.add('btn-default');\n            key.textContent = `${i}`;\n            key.dataset['value'] = `${i}`;\n            key.addEventListener('click', (ev)=>{\n                ev.preventDefault();\n                ev.stopPropagation();\n                if (key.classList.contains('disabled')) return;\n                this.cb(i, keyboardDraftModeSwitch.checked);\n            });\n            keyboard.appendChild(key);\n        }\n        // Scope the click events.\n        this.container.addEventListener('click', (ev)=>{\n            ev.stopPropagation();\n        });\n        // This needs to be called before hide(), otherwise they will be all 0s.\n        this.width = this.container.clientWidth;\n        this.height = this.container.clientHeight;\n        this.hide();\n    }\n    show(boardUi, coord) {\n        // Calculate the location.\n        const w = this.width;\n        const h = this.height;\n        const x1 = boardUi.getCanvasPosForIdx(coord.x);\n        const x2 = boardUi.getCanvasPosForIdx(coord.x + 1);\n        const y1 = boardUi.getCanvasPosForIdx(coord.y);\n        const y2 = boardUi.getCanvasPosForIdx(coord.y + 1);\n        const MARGIN = 8;\n        const x = x1 - w - MARGIN > 0 ? x1 - w - MARGIN : x2 + MARGIN / 2;\n        const y = y2 + h < boardUi.config.size ? y2 + MARGIN / 2 : y1 - MARGIN - h;\n        this.container.style.left = `${x}px`;\n        this.container.style.top = `${y}px`;\n        this.refreshNumbers(boardUi, coord);\n        // Show it.\n        const c = this.container;\n        c.classList.remove('hidden');\n        console.debug('display virtual keyboard at (%d, %d)', x, y);\n    }\n    refreshNumbers(boardUi, coord) {\n        // Hide unavailable numbers.\n        const draftNumbers = boardUi.gameBoard.getCellByCoord(coord).draftNumbers;\n        const availableNumbers = boardUi.gameBoard.getAvailableNumbersForCell(coord);\n        const keyboard = document.getElementById('keyboard');\n        keyboard.childNodes.forEach((node)=>{\n            const dom = node;\n            const value = parseInt(dom.dataset['value']);\n            if (availableNumbers.has(value)) {\n                dom.classList.add('enabled');\n                dom.classList.remove('disabled');\n            } else {\n                dom.classList.add('disabled');\n                dom.classList.remove('enabled');\n            }\n            if (draftNumbers.has(value)) dom.classList.add('highlight');\n            else dom.classList.remove('highlight');\n        });\n    }\n    hide() {\n        console.debug('hide virtual keyboard');\n        this.container.classList.add('hidden');\n    }\n}\nclass $264de1acac9b7e95$export$a2ef264ccbaba224 {\n    config;\n    container;\n    gameBoard;\n    virtualKeyboard;\n    gridCanvas;\n    neighHighlightCanvas;\n    numberHighlightCanvas;\n    // The canvas layer for displaying numbers.\n    numbersCanvas;\n    // The canvas layer for displaying cursor.\n    cursorCanvas;\n    // The canvas layer for handling mouse event.\n    clickCanvas;\n    cursorCoord = null;\n    focusedNumber = null;\n    focusedLevel = 0;\n    constructor(container, gameBoard, digitInputCallback, config){\n        this.container = container;\n        this.gameBoard = gameBoard;\n        this.virtualKeyboard = new $264de1acac9b7e95$var$VirtualKeyboard(this.container, (v, b)=>{\n            // Do not hide in draft mode.\n            if (!b) this.virtualKeyboard.hide();\n            digitInputCallback(v, b);\n            if (this.cursorCoord) this.virtualKeyboard.refreshNumbers(this, this.cursorCoord);\n        });\n        this.updateConfig(config);\n        container.style.height = `${container.clientWidth}px`;\n    }\n    getTheme() {\n        return $f360512a3c30bea8$export$3bfd0d5209a8006a();\n    }\n    getCellSize() {\n        return (this.config.size - $264de1acac9b7e95$var$CANVAS_MARGIN * 2) / 9;\n    }\n    getCanvasPosForIdx(index) {\n        return $264de1acac9b7e95$var$CANVAS_MARGIN + this.getCellSize() * index;\n    }\n    getIdxForCanvasPos(pos) {\n        for(let i = 0; i < 9; ++i){\n            if (pos < this.getCanvasPosForIdx(i + 1) && pos > this.getCanvasPosForIdx(i)) return i;\n        }\n        return null;\n    }\n    updateBoard(board = null) {\n        if (board !== null) this.gameBoard = board;\n        this.redrawNumbers();\n        this.redrawHighlight();\n    }\n    updateConfig(config) {\n        this.config = config;\n        // Remove all canvas children at first.\n        Array.from(this.container.children).forEach((child)=>{\n            if (!(child instanceof HTMLCanvasElement)) return;\n            this.container.removeChild(child);\n        });\n        this.numberHighlightCanvas = this.createCanvas(1);\n        this.neighHighlightCanvas = this.createCanvas(2);\n        this.gridCanvas = this.createCanvas(3);\n        this.numbersCanvas = this.createCanvas(4);\n        this.cursorCanvas = this.createCanvas(5);\n        this.clickCanvas = this.createCanvas(6);\n        this.redrawGrid();\n        this.redrawNumbers();\n        this.clickCanvas.addEventListener('click', (ev)=>{\n            ev.preventDefault();\n            ev.stopPropagation();\n            // if (ev.detail > 1) {\n            //   return;\n            // }\n            console.debug(\"Handle click\");\n            this.virtualKeyboard.hide();\n            const rect = this.clickCanvas.getBoundingClientRect();\n            const x = this.getIdxForCanvasPos(ev.clientX - rect.left);\n            const y = this.getIdxForCanvasPos(ev.clientY - rect.top);\n            // Reset cursor if the click is out of bound.\n            if (x === null || y === null) this.updateCursor(null);\n            else {\n                const coord = new (0, $c02655ebd8daba6d$export$d6e0f5996cc55599)(x, y);\n                this.updateCursor(coord);\n                // If the cell is empty, show keyboard.\n                let cell = this.gameBoard.getCellByCoord(coord);\n                if (cell.value === null) this.virtualKeyboard.show(this, coord);\n                else this.updateFocusedNumber(cell.value, 0);\n            }\n        });\n        this.clickCanvas.addEventListener('dblclick', (ev)=>{\n            ev.preventDefault();\n            ev.stopPropagation();\n            console.debug(\"Handle double click\");\n            const rect = this.clickCanvas.getBoundingClientRect();\n            const x = this.getIdxForCanvasPos(ev.clientX - rect.left);\n            const y = this.getIdxForCanvasPos(ev.clientY - rect.top);\n            // Reset cursor if the click is out of bound.\n            if (x === null || y === null) this.updateFocusedNumber(null);\n            else {\n                const cell = this.gameBoard.getCellByCoord(new (0, $c02655ebd8daba6d$export$d6e0f5996cc55599)(x, y));\n                // Allow double click to cancel selection.\n                this.updateFocusedNumber(cell.value === this.focusedNumber && this.focusedLevel === 1 ? null : cell.value, 1);\n            }\n        });\n    }\n    updateCursor(coord) {\n        console.debug('Set cursor to %s', coord);\n        if (coord === null) this.virtualKeyboard.hide();\n        // TODO: If the pos did not change, we can skip the following logic.\n        this.cursorCoord = coord;\n        this.redrawCursor();\n        this.redrawHighlight();\n    }\n    moveCursor(d) {\n        if (!this.cursorCoord) return;\n        this.virtualKeyboard.hide();\n        let x = this.cursorCoord.x;\n        let y = this.cursorCoord.y;\n        switch(d){\n            case $264de1acac9b7e95$export$cc1a246adca07dd4.UP:\n                y -= 1;\n                break;\n            case $264de1acac9b7e95$export$cc1a246adca07dd4.DOWN:\n                y += 1;\n                break;\n            case $264de1acac9b7e95$export$cc1a246adca07dd4.LEFT:\n                x -= 1;\n                break;\n            case $264de1acac9b7e95$export$cc1a246adca07dd4.RIGHT:\n                x += 1;\n                break;\n        }\n        if (x < 9 && x >= 0 && y < 9 && y >= 0) this.updateCursor(new (0, $c02655ebd8daba6d$export$d6e0f5996cc55599)(x, y));\n    }\n    updateFocusedNumber(value, focusedLevel = 0) {\n        this.focusedNumber = value;\n        this.focusedLevel = focusedLevel;\n        this.redrawHighlight();\n        this.redrawNumbers();\n    }\n    createCanvas(zIndex) {\n        const canvas = document.createElement('canvas');\n        const size = this.config.size;\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n        canvas.style.position = 'absolute';\n        canvas.style.left = '0';\n        canvas.style.top = '0';\n        canvas.style.zIndex = `${zIndex}`;\n        // Scale the canvas properly.\n        const ratio = window.devicePixelRatio;\n        canvas.width = size * ratio;\n        canvas.height = size * ratio;\n        const ctx = $264de1acac9b7e95$var$getCanvas2DContext(canvas);\n        ctx.scale(ratio, ratio);\n        this.container.appendChild(canvas);\n        return canvas;\n    }\n    redrawHighlight() {\n        $264de1acac9b7e95$var$clearCanvas(this.neighHighlightCanvas);\n        $264de1acac9b7e95$var$clearCanvas(this.numberHighlightCanvas);\n        const highlightCell = (ctx, coord, color)=>{\n            const x = this.getCanvasPosForIdx(coord.x);\n            const y = this.getCanvasPosForIdx(coord.y);\n            ctx.fillStyle = color;\n            ctx.fillRect(x, y, this.getCellSize(), this.getCellSize());\n        };\n        const highlightDraftCell = (ctx, coord, value, color)=>{\n            const boxSize = this.getCellSize() / 3;\n            const x = this.getCanvasPosForIdx(coord.x) + Math.floor((value - 1) % 3) * boxSize;\n            const y = this.getCanvasPosForIdx(coord.y) + Math.floor((value - 1) / 3) * boxSize;\n            ctx.fillStyle = color;\n            ctx.fillRect(x, y, boxSize, boxSize);\n        };\n        const cursor = this.cursorCoord;\n        if (cursor && this.config.highlightCursorNeighbors) {\n            const ctx = $264de1acac9b7e95$var$getCanvas2DContext(this.neighHighlightCanvas);\n            const cells = this.gameBoard.getCellsByNeighborToCoord(cursor);\n            for (const cell of cells)highlightCell(ctx, cell.coordinate, this.getTheme().colorHighlightBg1);\n        }\n        if (this.focusedNumber !== null && (this.config.highlightNumberNeighbors || this.config.highlightNumber)) {\n            const ctx = $264de1acac9b7e95$var$getCanvas2DContext(this.numberHighlightCanvas);\n            const numberCells = this.gameBoard.cells.filter((c)=>{\n                return c.value === this.focusedNumber;\n            });\n            let cells = numberCells.slice();\n            if (this.config.highlightNumberNeighbors && this.focusedLevel === 1) {\n                const cellArrays = numberCells.map((c)=>{\n                    return this.gameBoard.getCellsByNeighborToCoord(c.coordinate);\n                });\n                cells = (0, $c02655ebd8daba6d$export$2b07a0b5dadde1bc)(cellArrays);\n            }\n            for (const cell of cells)highlightCell(ctx, cell.coordinate, this.getTheme().colorHighlightBg2);\n            // Also highlight all draft values.\n            for (const cell of this.gameBoard.cells)if (cell.hasDraftNumber(this.focusedNumber)) highlightDraftCell(ctx, cell.coordinate, this.focusedNumber, this.getTheme().colorHighlightBg1);\n        }\n    }\n    redrawGrid() {\n        const ctx = $264de1acac9b7e95$var$getCanvas2DContext(this.gridCanvas);\n        if (!ctx) {\n            console.error('Context not available');\n            return;\n        }\n        const startPos = this.getCanvasPosForIdx(0);\n        const endPos = this.getCanvasPosForIdx(9);\n        const style = {\n            color: this.getTheme().colorPrefilled\n        };\n        const sqrBorderStyle = {\n            color: this.getTheme().colorPrefilled,\n            width: 3\n        };\n        for(let i = 0; i <= 9; i++){\n            const pos = this.getCanvasPosForIdx(i);\n            $264de1acac9b7e95$var$drawLine(ctx, startPos, pos, endPos, pos, i % 3 ? style : sqrBorderStyle);\n            $264de1acac9b7e95$var$drawLine(ctx, pos, startPos, pos, endPos, i % 3 ? style : sqrBorderStyle);\n        }\n    }\n    redrawNumbers() {\n        if (!this.gameBoard) return;\n        const ctx = this.numbersCanvas.getContext('2d');\n        if (!ctx) {\n            console.error('Context not available');\n            return;\n        }\n        $264de1acac9b7e95$var$clearCanvas(this.numbersCanvas);\n        const drawNumber = (val, coord, small, defaultColor)=>{\n            const boxSize = this.getCellSize() / (small ? 3 : 1);\n            const fontSize = boxSize * 0.8;\n            let x = this.getCanvasPosForIdx(coord.x) + boxSize / 2;\n            let y = this.getCanvasPosForIdx(coord.y) + boxSize / 2 + fontSize * 0.07;\n            if (small) {\n                x += Math.floor((val - 1) % 3) * boxSize;\n                y += Math.floor((val - 1) / 3) * boxSize;\n            }\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.font = `${fontSize}px monospace`;\n            ctx.fillStyle = defaultColor;\n            if (val === this.focusedNumber) ctx.fillStyle = this.getTheme().colorHighlightFg;\n            ctx.fillText(val.toString(), x, y);\n        };\n        for (const cell of this.gameBoard.cells){\n            if (cell.state === (0, $c02655ebd8daba6d$export$50932e179583d398).PREFILLED) drawNumber(cell.value, cell.coordinate, false, this.getTheme().colorPrefilled);\n            if (cell.state === (0, $c02655ebd8daba6d$export$50932e179583d398).SOLVED) drawNumber(cell.value, cell.coordinate, false, this.getTheme().colorSolved);\n            if (cell.state === (0, $c02655ebd8daba6d$export$50932e179583d398).SOLVING) {\n                for(let i = 1; i <= 9; ++i)if (cell.draftNumbers.has(i)) drawNumber(i, cell.coordinate, true, this.getTheme().colorDraft);\n            }\n        }\n    }\n    redrawCursor() {\n        const ctx = $264de1acac9b7e95$var$getCanvas2DContext(this.cursorCanvas);\n        // Clear the current drawing at first.\n        $264de1acac9b7e95$var$clearCanvas(this.cursorCanvas);\n        const coord = this.cursorCoord;\n        if (coord === null) return;\n        // Redraw cursor box.\n        const x1 = this.getCanvasPosForIdx(coord.x);\n        const x2 = this.getCanvasPosForIdx(coord.x + 1);\n        const y1 = this.getCanvasPosForIdx(coord.y);\n        const y2 = this.getCanvasPosForIdx(coord.y + 1);\n        const style = {\n            color: this.getTheme().colorHighlightFg,\n            width: 3\n        };\n        $264de1acac9b7e95$var$drawLine(ctx, x1, y1, x2, y1, style);\n        $264de1acac9b7e95$var$drawLine(ctx, x1, y2, x2, y2, style);\n        $264de1acac9b7e95$var$drawLine(ctx, x1, y1, x1, y2, style);\n        $264de1acac9b7e95$var$drawLine(ctx, x2, y1, x2, y2, style);\n    }\n}\n\n\nfunction $95f0dc4e46c5e870$var$secondsToHumanReadable(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(remainingSeconds).padStart(2, '0');\n    return `${formattedMinutes}:${formattedSeconds}`;\n}\nfunction $95f0dc4e46c5e870$var$keyCodeToDirection(code) {\n    switch(code){\n        case 'ArrowUp':\n            return (0, $264de1acac9b7e95$export$cc1a246adca07dd4).UP;\n        case 'ArrowDown':\n            return (0, $264de1acac9b7e95$export$cc1a246adca07dd4).DOWN;\n        case 'ArrowLeft':\n            return (0, $264de1acac9b7e95$export$cc1a246adca07dd4).LEFT;\n        case 'ArrowRight':\n            return (0, $264de1acac9b7e95$export$cc1a246adca07dd4).RIGHT;\n        default:\n            throw new Error('Unreachable');\n    }\n}\nconst $95f0dc4e46c5e870$var$HTML_CONTENT = `\n<p id=\"notification\" class=\"hidden\">Prompt</p>\n<div id=\"board-banner\">\n  <span>Time:&nbsp;<span id=\"value-timer\">0:00</span></span>\n  <span>Mistakes:&nbsp;<span id=\"value-mistakes\">0</span></span>\n  <span>Remaining:&nbsp;<span id=\"value-remaining\">0</span></span>\n</div>\n<div id=\"board\" style=\"position: relative;\"></div>\n<div id=\"board-buttons\">\n  <span class=\"btn-default enabled\" id=\"btn-new-game\">New Game</span>\n  <span class=\"btn-default enabled\" id=\"btn-quick-draft\">Quick Draft</span>\n  <span class=\"btn-default enabled\" id=\"btn-save\">Save</span>\n  <span class=\"btn-default enabled\" id=\"btn-load\">Load</span>\n</div>`;\nclass $95f0dc4e46c5e870$export$f3f3f6c0124f08de {\n    game;\n    pageDom;\n    boardUi;\n    constructor(game, pageDom){\n        this.game = game;\n        this.pageDom = pageDom;\n        // Update the internal html.\n        this.pageDom.setHTMLUnsafe($95f0dc4e46c5e870$var$HTML_CONTENT);\n        // Initialize the banner.\n        this.refreshBanner();\n        // Create the board drawing.\n        const boardDom = document.getElementById('board');\n        this.boardUi = new (0, $264de1acac9b7e95$export$a2ef264ccbaba224)(boardDom, game.puzzleBoard, this.handleNumberInput.bind(this), {\n            size: boardDom.clientWidth,\n            highlightCursorNeighbors: true,\n            highlightNumber: true,\n            highlightNumberNeighbors: true\n        });\n        // Set up button actions.\n        const quickDraftBtn = document.getElementById('btn-quick-draft');\n        quickDraftBtn?.addEventListener('click', (ev)=>{\n            ev.stopPropagation();\n            this.game.recalculateDraftNumbers();\n            this.boardUi.updateBoard();\n        });\n        const newGameBtn = document.getElementById('btn-new-game');\n        newGameBtn.addEventListener('click', (ev)=>{\n            ev.stopPropagation();\n            if (confirm('Abort the current game and start a new one?') === true) location.reload();\n        });\n        const saveBtn = document.getElementById('btn-save');\n        const loadBtn = document.getElementById('btn-load');\n        const updateSaveLoadBtnState = ()=>{\n            if (game.savedPuzzleBoard !== null) {\n                loadBtn.classList.add('enabled');\n                loadBtn.classList.remove('disabled');\n            } else {\n                loadBtn.classList.remove('enabled');\n                loadBtn.classList.add('disabled');\n            }\n        };\n        updateSaveLoadBtnState();\n        saveBtn.addEventListener('click', (ev)=>{\n            ev.stopPropagation();\n            game.saveState();\n            updateSaveLoadBtnState();\n            this.showNotification('Saved');\n        });\n        loadBtn.addEventListener('click', (ev)=>{\n            ev.stopPropagation();\n            if (!loadBtn.classList.contains('enabled')) return;\n            if (confirm('Load previously saved state?') === true) {\n                game.loadState();\n                this.boardUi.updateBoard(game.puzzleBoard);\n                updateSaveLoadBtnState();\n                this.showNotification('Loaded');\n            }\n        });\n    }\n    // Handle keyboard event for the game. Returns whether the event is consumed by this component.\n    handleKeyDownEvent(ev) {\n        console.debug(ev);\n        switch(ev.code){\n            case 'ArrowUp':\n            case 'ArrowDown':\n            case 'ArrowLeft':\n            case 'ArrowRight':\n                this.boardUi.moveCursor($95f0dc4e46c5e870$var$keyCodeToDirection(ev.code));\n                return true;\n            case 'Digit1':\n            case 'Digit2':\n            case 'Digit3':\n            case 'Digit4':\n            case 'Digit5':\n            case 'Digit6':\n            case 'Digit7':\n            case 'Digit8':\n            case 'Digit9':\n                this.handleDigitKeyEvent(ev);\n                return true;\n            case 'KeyD':\n                this.game.recalculateDraftNumbers();\n                this.boardUi.updateBoard();\n                return true;\n            default:\n                // Do nothing now.\n                return false;\n        }\n    }\n    // Note: We cannot declare vars in a case branch, so have a separate function here.\n    handleDigitKeyEvent(ev) {\n        const value = parseInt(ev.code.charAt(5));\n        if (this.boardUi.cursorCoord !== null) this.handleNumberInput(value, !ev.shiftKey);\n    }\n    handleNumberInput(value, draftMode) {\n        if (this.boardUi.cursorCoord === null) return;\n        console.debug('hit %d', value);\n        if (!draftMode) this.game.fillInNumber(this.boardUi.cursorCoord, value);\n        else this.game.toggleDraftNumber(this.boardUi.cursorCoord, value);\n        this.boardUi.updateBoard();\n        this.refreshBanner(true);\n    }\n    handleOutOfBoundClick() {\n        // Reset cursor if we lost the focus.\n        this.boardUi.updateCursor(null);\n    }\n    showNotification(msg) {\n        const dom = document.getElementById('notification');\n        dom.innerText = msg;\n        dom.classList.remove('hidden');\n        setTimeout(()=>{\n            dom.classList.add('hidden');\n        }, 2500);\n    }\n    refreshBanner(once = false) {\n        const timerDom = document.getElementById('value-timer');\n        const mistakesDom = document.getElementById('value-mistakes');\n        const remainingDom = document.getElementById('value-remaining');\n        timerDom.textContent = `${$95f0dc4e46c5e870$var$secondsToHumanReadable(this.game.getElapsedSeconds())}`;\n        mistakesDom.textContent = `${this.game.mistakes}`;\n        remainingDom.textContent = `${this.game.getEmptyCellsCount()}`;\n        // TODO: Add stop condition.\n        if (!once) // We are showing a timer on the UI, so refresh it every second.\n        setTimeout(()=>this.refreshBanner(), 1000);\n    }\n}\n\n\n\nclass $7855482cf5bb294a$export$c6b206237a2995ae extends $c02655ebd8daba6d$export$3ca9368aae595c1d {\n    static createFromBoard(board) {\n        const cells = new Array();\n        for (const cell of board.cells)if (cell.value === null) cells.push((0, $c02655ebd8daba6d$export$631497b75d3af52d).newSolving(cell.coordinate));\n        else cells.push((0, $c02655ebd8daba6d$export$631497b75d3af52d).newPrefilled(cell.coordinate, cell.value));\n        return new $7855482cf5bb294a$export$c6b206237a2995ae(cells);\n    }\n    clone() {\n        return new $7855482cf5bb294a$export$c6b206237a2995ae(this.cells.map((c)=>c.clone()));\n    }\n    getEmptyCellsCount() {\n        return this.cells.filter((cell)=>cell.state === (0, $c02655ebd8daba6d$export$50932e179583d398).SOLVING).length;\n    }\n    getAvailableNumbersForCell(coord) {\n        const cell = this.cells[coord.linearIndex];\n        if (cell.hasNumber()) return new Set();\n        const neighColors = new Set();\n        this.getCellsByNeighborToCoord(coord).forEach((x)=>{\n            if (x.value) neighColors.add(x.value);\n        });\n        const ret = new Set();\n        for(let i = 1; i <= 9; ++i)if (!neighColors.has(i)) ret.add(i);\n        return ret;\n    }\n    takeAction(action) {\n        console.debug($7855482cf5bb294a$var$actionToString(action));\n        const cell = this.getCellByCoord(action.coordinate);\n        switch(action.type){\n            case $7855482cf5bb294a$var$ActionType.REMOVE_DRAFT_NUMBER:\n                cell.removeDraftNumber(action.value);\n                break;\n            case $7855482cf5bb294a$var$ActionType.FILL_IN_NUMBER:\n                cell.fillNumber(action.value);\n                break;\n        }\n    }\n    takeActions(actions) {\n        for (const action of actions)this.takeAction(action);\n    }\n}\nvar $7855482cf5bb294a$var$ActionType;\n(function(ActionType) {\n    ActionType[\"REMOVE_DRAFT_NUMBER\"] = \"remove draft number\";\n    ActionType[\"FILL_IN_NUMBER\"] = \"fill in number\";\n})($7855482cf5bb294a$var$ActionType || ($7855482cf5bb294a$var$ActionType = {}));\nfunction $7855482cf5bb294a$var$actionToString(a) {\n    return `${a.coordinate.toString()}: ${a.type} value ${a.value}, reason: ${a.reasonString}`;\n}\nfunction $7855482cf5bb294a$export$a3896fdc4a7ed91d(board) {\n    const ret = new Array();\n    const addAction = function(targetCell, value, sourceCell) {\n        if (targetCell.state === (0, $c02655ebd8daba6d$export$50932e179583d398).SOLVING && targetCell.draftNumbers.has(value)) ret.push({\n            coordinate: targetCell.coordinate,\n            type: $7855482cf5bb294a$var$ActionType.REMOVE_DRAFT_NUMBER,\n            value: value,\n            reasonString: `Conflict with ${sourceCell.toString()}`\n        });\n    };\n    for(let i = 0; i < (0, $c02655ebd8daba6d$export$7331fb0f7c654bd8); i++){\n        const coord = $c02655ebd8daba6d$export$d6e0f5996cc55599.fromLinearIndex(i);\n        const cell = board.cells[i];\n        if (cell.state === (0, $c02655ebd8daba6d$export$50932e179583d398).SOLVING) continue;\n        if (cell.value === null) throw new Error('Invalid state');\n        const valueToRemove = cell.value;\n        for (const targetCell of board.getCellsByColumn(coord.x))addAction(targetCell, valueToRemove, cell);\n        for (const targetCell of board.getCellsByRow(coord.y))addAction(targetCell, valueToRemove, cell);\n        for (const targetCell of board.getCellsBySquare(coord.squareIndex))addAction(targetCell, valueToRemove, cell);\n    }\n    return ret;\n}\nfunction $7855482cf5bb294a$var$uniqueValueSetter(board) {\n    const ret = new Array();\n    const addAction = function(cell, value) {\n        ret.push({\n            coordinate: cell.coordinate,\n            type: $7855482cf5bb294a$var$ActionType.FILL_IN_NUMBER,\n            value: value,\n            reasonString: null\n        });\n    };\n    for(let i = 0; i < (0, $c02655ebd8daba6d$export$7331fb0f7c654bd8); i++){\n        const cell = board.cells[i];\n        if (cell.state !== (0, $c02655ebd8daba6d$export$50932e179583d398).SOLVING) continue;\n        const value = cell.draftNumbers.getUnique();\n        if (value !== null) addAction(cell, value);\n    }\n    return ret;\n}\nfunction $7855482cf5bb294a$export$2865df1f26e73f8e(board) {\n    const solvingBoard = $7855482cf5bb294a$export$c6b206237a2995ae.createFromBoard(board);\n    // eslint-disable-next-line no-constant-condition\n    while(true){\n        const solvers = [\n            {\n                solve: $7855482cf5bb294a$export$a3896fdc4a7ed91d\n            },\n            {\n                solve: $7855482cf5bb294a$var$uniqueValueSetter\n            }\n        ];\n        const before = solvingBoard.getEmptyCellsCount();\n        for (const solver of solvers){\n            const actions = solver.solve(solvingBoard);\n            console.debug(actions.length);\n            solvingBoard.takeActions(actions);\n        }\n        const after = solvingBoard.getEmptyCellsCount();\n        console.debug(solvingBoard.printBoard());\n        if (before === after) break;\n    }\n}\n\n\nclass $ff40705a305463f8$export$985739bfa5723e08 {\n    answerBoard;\n    puzzleBoard;\n    // Game start time and end time.\n    startTime;\n    endTime = null;\n    // Saved state.\n    savedPuzzleBoard = null;\n    // Number of the wrong input.\n    mistakes = 0;\n    constructor(answer, puzzle){\n        this.answerBoard = answer;\n        this.puzzleBoard = (0, $7855482cf5bb294a$export$c6b206237a2995ae).createFromBoard(puzzle);\n        this.startTime = performance.now();\n    }\n    // Fills in `value` at `coord`.\n    fillInNumber(coord, value) {\n        const cell = this.puzzleBoard.cells[coord.linearIndex];\n        if (cell.hasNumber()) {\n            console.debug('%s already have number', coord);\n            return;\n        }\n        // TODO: This part should be able to be controlled by rules.\n        if (this.answerBoard.cells[coord.linearIndex].value !== value) {\n            alert('Not correct :)');\n            this.mistakes++;\n            return;\n        }\n        cell.fillNumber(value);\n        // Remove all draft numbers which are no longer possible after this action.\n        const actions = (0, $7855482cf5bb294a$export$a3896fdc4a7ed91d)(this.puzzleBoard);\n        this.puzzleBoard.takeActions(actions);\n        // All values have been filled.\n        if (this.isAllCorrect()) {\n            this.endTime = performance.now();\n            alert('Congratulations!!!');\n        }\n    }\n    toggleDraftNumber(coord, value) {\n        const cell = this.puzzleBoard.cells[coord.linearIndex];\n        if (cell.hasNumber()) {\n            console.debug('%s already have number', coord);\n            return;\n        }\n        if (cell.hasDraftNumber(value)) cell.removeDraftNumber(value);\n        else cell.addDraftNumber(value);\n    }\n    recalculateDraftNumbers() {\n        for (const cell of this.puzzleBoard.cells)if (!cell.hasNumber()) cell.addAllDraftNumber();\n        const actions = (0, $7855482cf5bb294a$export$a3896fdc4a7ed91d)(this.puzzleBoard);\n        this.puzzleBoard.takeActions(actions);\n    }\n    getEmptyCellsCount() {\n        let cnt = 0;\n        for (const cell of this.puzzleBoard.cells)if (!cell.hasNumber()) cnt++;\n        return cnt;\n    }\n    getElapsedSeconds() {\n        let end = performance.now();\n        if (this.endTime !== null) end = this.endTime;\n        return Math.round((end - this.startTime) / 1000);\n    }\n    isAllCorrect() {\n        for(let i = 0; i < 81; ++i){\n            if (this.puzzleBoard.cells[i].value !== this.answerBoard.cells[i].value) return false;\n        }\n        return true;\n    }\n    saveState() {\n        this.savedPuzzleBoard = this.puzzleBoard.clone();\n    }\n    loadState() {\n        if (this.savedPuzzleBoard === null) {\n            console.error('No saved data');\n            return;\n        }\n        this.puzzleBoard = this.savedPuzzleBoard;\n        this.savedPuzzleBoard = null;\n    }\n}\n\n\nasync function $c283b26f8307214a$var$waitForDifficultyInput() {\n    return new Promise((resolve)=>{\n        const btns = document.getElementsByClassName('btn-difficulty');\n        Array.from(btns).forEach((btn)=>{\n            const val = parseInt(btn.dataset['value']);\n            if (Number.isNaN(val)) {\n                console.error('Invalid value');\n                return;\n            }\n            btn.addEventListener('click', ()=>{\n                resolve(val);\n            });\n        });\n    });\n}\n// Switches to page `to` and hide other pages.\nfunction $c283b26f8307214a$var$switchPage(to) {\n    Array.from(to.parentElement.children).forEach((node)=>{\n        node.classList.remove('visible');\n    });\n    to.classList.add('visible');\n}\nasync function $c283b26f8307214a$var$main() {\n    $f360512a3c30bea8$export$2cd8252107eb640b();\n    const initPageDom = document.getElementById('init-page');\n    const loadingPageDom = document.getElementById('loading-page');\n    const gamePageDom = document.getElementById('game-page');\n    // Show the init page at first.\n    $c283b26f8307214a$var$switchPage(initPageDom);\n    // Get the difficulty selected by the user.\n    const difficulty = await $c283b26f8307214a$var$waitForDifficultyInput();\n    const clues = (4 - difficulty) * 14 - 9;\n    // Show the loading page.\n    $c283b26f8307214a$var$switchPage(loadingPageDom);\n    await (0, $fb6cc04260f9a749$export$2e2bcd8739ae039)().catch((error)=>{\n        console.error('Error initializing WASM module:', error);\n    });\n    // So that panic output will look better in the console.\n    $fb6cc04260f9a749$export$ede763ccc882b3e5();\n    console.debug('wasm loaded');\n    // Create a random game.\n    console.debug('Generating game with %d clues', clues);\n    const puzzleArr = new Uint8Array($c02655ebd8daba6d$export$7331fb0f7c654bd8);\n    $fb6cc04260f9a749$export$80d376111cc09ad7(clues, puzzleArr);\n    console.debug('Puzzle generated: ', puzzleArr);\n    const answerArr = new Uint8Array(puzzleArr);\n    $fb6cc04260f9a749$export$732a70cc09cae898(answerArr);\n    console.debug('Answer generated: ', answerArr);\n    const answer = $c02655ebd8daba6d$export$3ca9368aae595c1d.createBoardFromUint8Array(answerArr);\n    const puzzle = $c02655ebd8daba6d$export$3ca9368aae595c1d.createBoardFromUint8Array(puzzleArr);\n    const game = new (0, $ff40705a305463f8$export$985739bfa5723e08)(answer, puzzle);\n    const controller = new (0, $95f0dc4e46c5e870$export$f3f3f6c0124f08de)(game, gamePageDom);\n    // Register global keyboard and mouse event.\n    // We can add logic to remove this listener when necessary in the future.\n    window.addEventListener('keydown', (ev)=>{\n        if (controller.handleKeyDownEvent(ev)) ev.preventDefault();\n    });\n    window.addEventListener('click', ()=>{\n        controller.handleOutOfBoundClick();\n    });\n    // Show the game page.\n    $c283b26f8307214a$var$switchPage(gamePageDom);\n}\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\n$c283b26f8307214a$var$main();\n\n\n//# sourceMappingURL=index.42eb7006.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"f7twW\\\",\\\"index.42eb7006.js\\\",\\\"8uHta\\\",\\\"sudoku_wasm_bg.e453e396.wasm\\\"]\"));","import init, * as wasm from '../wasm/pkg/sudoku_wasm.js';\nimport * as theme from './theme.js';\nimport * as types from './types.js';\nimport { GameController } from './game_controller.js';\nimport { Game } from './game.js';\nasync function waitForDifficultyInput() {\n    return new Promise(resolve => {\n        const btns = document.getElementsByClassName('btn-difficulty');\n        Array.from(btns).forEach(btn => {\n            const val = parseInt(btn.dataset['value']);\n            if (Number.isNaN(val)) {\n                console.error('Invalid value');\n                return;\n            }\n            btn.addEventListener('click', () => {\n                resolve(val);\n            });\n        });\n    });\n}\n// Switches to page `to` and hide other pages.\nfunction switchPage(to) {\n    Array.from(to.parentElement.children).forEach(node => {\n        node.classList.remove('visible');\n    });\n    to.classList.add('visible');\n}\nasync function main() {\n    theme.init();\n    const initPageDom = document.getElementById('init-page');\n    const loadingPageDom = document.getElementById('loading-page');\n    const gamePageDom = document.getElementById('game-page');\n    // Show the init page at first.\n    switchPage(initPageDom);\n    // Get the difficulty selected by the user.\n    const difficulty = await waitForDifficultyInput();\n    const clues = (4 - difficulty) * 14 - 9;\n    // Show the loading page.\n    switchPage(loadingPageDom);\n    await init().catch(error => {\n        console.error('Error initializing WASM module:', error);\n    });\n    // So that panic output will look better in the console.\n    wasm.init_panic_hook();\n    console.debug('wasm loaded');\n    // Create a random game.\n    console.debug('Generating game with %d clues', clues);\n    const puzzleArr = new Uint8Array(types.CELLS_NUMBER);\n    wasm.generate(clues, puzzleArr);\n    console.debug('Puzzle generated: ', puzzleArr);\n    const answerArr = new Uint8Array(puzzleArr);\n    wasm.fast_solve(answerArr);\n    console.debug('Answer generated: ', answerArr);\n    const answer = types.GenericBoard.createBoardFromUint8Array(answerArr);\n    const puzzle = types.GenericBoard.createBoardFromUint8Array(puzzleArr);\n    const game = new Game(answer, puzzle);\n    const controller = new GameController(game, gamePageDom);\n    // Register global keyboard and mouse event.\n    // We can add logic to remove this listener when necessary in the future.\n    window.addEventListener('keydown', ev => {\n        if (controller.handleKeyDownEvent(ev)) {\n            ev.preventDefault();\n        }\n    });\n    window.addEventListener('click', () => {\n        controller.handleOutOfBoundClick();\n    });\n    // Show the game page.\n    switchPage(gamePageDom);\n}\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\nmain();\n//# sourceMappingURL=main.js.map","import init, * as wasm from '../wasm/pkg/sudoku_wasm.js';\nimport * as theme from './theme.js';\nimport * as types from './types.js';\nimport {GameController} from './game_controller.js';\nimport {Game} from './game.js';\n\nasync function waitForDifficultyInput(): Promise<number> {\n  return new Promise(resolve => {\n    const btns = document.getElementsByClassName('btn-difficulty');\n    Array.from(btns).forEach(btn => {\n      const val = parseInt((btn as HTMLElement).dataset['value']!);\n      if (Number.isNaN(val)) {\n        console.error('Invalid value');\n        return;\n      }\n      btn.addEventListener('click', () => {\n        resolve(val);\n      });\n    });\n  });\n}\n\n// Switches to page `to` and hide other pages.\nfunction switchPage(to: HTMLElement) {\n  Array.from(to.parentElement!.children).forEach(node => {\n    node.classList.remove('visible');\n  });\n\n  to.classList.add('visible');\n}\n\nasync function main() {\n  theme.init();\n\n  const initPageDom = document.getElementById('init-page')!;\n  const loadingPageDom = document.getElementById('loading-page')!;\n  const gamePageDom = document.getElementById('game-page')!;\n\n  // Show the init page at first.\n  switchPage(initPageDom);\n\n  // Get the difficulty selected by the user.\n  const difficulty = await waitForDifficultyInput();\n  const clues = (4 - difficulty) * 14 - 9;\n\n  // Show the loading page.\n  switchPage(loadingPageDom);\n\n  await init().catch(error => {\n    console.error('Error initializing WASM module:', error);\n  });\n\n  // So that panic output will look better in the console.\n  wasm.init_panic_hook();\n  console.debug('wasm loaded');\n\n  // Create a random game.\n  console.debug('Generating game with %d clues', clues);\n  const puzzleArr = new Uint8Array(types.CELLS_NUMBER);\n  wasm.generate(clues, puzzleArr);\n  console.debug('Puzzle generated: ', puzzleArr);\n  const answerArr = new Uint8Array(puzzleArr);\n  wasm.fast_solve(answerArr);\n  console.debug('Answer generated: ', answerArr);\n\n  const answer = types.GenericBoard.createBoardFromUint8Array(answerArr);\n  const puzzle = types.GenericBoard.createBoardFromUint8Array(puzzleArr);\n\n  const game = new Game(answer, puzzle);\n  const controller = new GameController(game, gamePageDom);\n\n  // Register global keyboard and mouse event.\n  // We can add logic to remove this listener when necessary in the future.\n  window.addEventListener('keydown', ev => {\n    if (controller.handleKeyDownEvent(ev)) {\n      ev.preventDefault();\n    }\n  });\n\n  window.addEventListener('click', () => {\n    controller.handleOutOfBoundClick();\n  });\n\n  // Show the game page.\n  switchPage(gamePageDom);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\nmain();\n","let wasm;\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_2.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nexport function init_panic_hook() {\n    wasm.init_panic_hook();\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_2.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n/**\n * @param {Uint8Array} board\n * @returns {number}\n */\nexport function fast_solve(board) {\n    var ptr0 = passArray8ToWasm0(board, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    const ret = wasm.fast_solve(ptr0, len0, board);\n    if (ret[2]) {\n        throw takeFromExternrefTable0(ret[1]);\n    }\n    return ret[0] >>> 0;\n}\n\n/**\n * @param {number} non_empty_cnt\n * @param {Uint8Array} output_puzzle\n */\nexport function generate(non_empty_cnt, output_puzzle) {\n    var ptr0 = passArray8ToWasm0(output_puzzle, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.generate(non_empty_cnt, ptr0, len0, output_puzzle);\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_buffer_61b7ce01341d7f88 = function(arg0) {\n        const ret = arg0.buffer;\n        return ret;\n    };\n    imports.wbg.__wbg_call_500db948e69c7330 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = arg0.call(arg1, arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_call_b0d8e36992d9900d = function() { return handleError(function (arg0, arg1) {\n        const ret = arg0.call(arg1);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_crypto_ed58b8e10a292839 = function(arg0) {\n        const ret = arg0.crypto;\n        return ret;\n    };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_getRandomValues_bcb4912f16000dc4 = function() { return handleError(function (arg0, arg1) {\n        arg0.getRandomValues(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_msCrypto_0a36e2ec3a343d26 = function(arg0) {\n        const ret = arg0.msCrypto;\n        return ret;\n    };\n    imports.wbg.__wbg_new_3ff5b33b1ce712df = function(arg0) {\n        const ret = new Uint8Array(arg0);\n        return ret;\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_fd9e4bf8be2bc16d = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_ba35896968751d91 = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_34ce8f1051e74449 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_node_02999533c4ea02e3 = function(arg0) {\n        const ret = arg0.node;\n        return ret;\n    };\n    imports.wbg.__wbg_now_2c95c9de01293173 = function(arg0) {\n        const ret = arg0.now();\n        return ret;\n    };\n    imports.wbg.__wbg_performance_7a3ffd0b17f663ad = function(arg0) {\n        const ret = arg0.performance;\n        return ret;\n    };\n    imports.wbg.__wbg_process_5c1d670bc53614b8 = function(arg0) {\n        const ret = arg0.process;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_ab2cfe79ebbf2740 = function() { return handleError(function (arg0, arg1) {\n        arg0.randomFillSync(arg1);\n    }, arguments) };\n    imports.wbg.__wbg_require_79b1e9274cde3c87 = function() { return handleError(function () {\n        const ret = module.require;\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_set_23d69db4e5c66a6e = function(arg0, arg1, arg2) {\n        arg0.set(arg1, arg2 >>> 0);\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_0be7472e492ad3e3 = function() {\n        const ret = typeof global === 'undefined' ? null : global;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb = function() {\n        const ret = typeof globalThis === 'undefined' ? null : globalThis;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_SELF_1dc398a895c82351 = function() {\n        const ret = typeof self === 'undefined' ? null : self;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_static_accessor_WINDOW_ae1c80c7eea8d64a = function() {\n        const ret = typeof window === 'undefined' ? null : window;\n        return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n    };\n    imports.wbg.__wbg_subarray_46adeb9b86949d12 = function(arg0, arg1, arg2) {\n        const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbg_versions_c71aa1626a93e0a1 = function(arg0) {\n        const ret = arg0.versions;\n        return ret;\n    };\n    imports.wbg.__wbindgen_copy_to_typed_array = function(arg0, arg1, arg2) {\n        new Uint8Array(arg2.buffer, arg2.byteOffset, arg2.byteLength).set(getArrayU8FromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return ret;\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_2;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(arg0) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = arg0;\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(arg0) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = arg0 === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL('sudoku_wasm_bg.wasm', import.meta.url);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nexport { initSync };\nexport default __wbg_init;\n","module.exports = new __parcel__URL__(\"sudoku_wasm_bg.e453e396.wasm\").toString();","const CURRENT_THEME = {\n    colorPrefilled: '#050505',\n    colorSolved: '#156363',\n    colorDraft: '#447862',\n    colorHighlightFg: '#007896',\n    colorHighlightBg1: rgba('#dcc1c3', 1),\n    colorHighlightBg2: rgba('#dcd1d1', 0.5),\n    colorBg: '#fefefe',\n};\nexport function getCurrentTheme() {\n    return CURRENT_THEME;\n}\nfunction rgba(hex, alpha) {\n    hex = hex.replace('#', '');\n    const r = parseInt(hex.substring(0, 2), 16);\n    const g = parseInt(hex.substring(2, 4), 16);\n    const b = parseInt(hex.substring(4, 6), 16);\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\nconst CSS_JS_VAR_MAP = {\n    'color-prefilled': 'colorPrefilled',\n    'color-solved': 'colorSolved',\n    'color-draft': 'colorDraft',\n    'color-highlight-fg': 'colorHighlightFg',\n    'color-highlight-bg1': 'colorHighlightBg1',\n    'color-highlight-bg2': 'colorHighlightBg2',\n    'color-bg': 'colorBg',\n};\n// This function should be called on init.\nexport function init() {\n    setTheme('default');\n}\nfunction setTheme(name) {\n    for (const cssProp in CSS_JS_VAR_MAP) {\n        const jsProp = CSS_JS_VAR_MAP[cssProp];\n        const cssVar = `--${name}-${cssProp}`;\n        const val = window.getComputedStyle(document.body).getPropertyValue(cssVar);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        CURRENT_THEME[jsProp] = val;\n        document.documentElement.style.setProperty(`--${cssProp}`, val);\n    }\n}\n//# sourceMappingURL=theme.js.map","// This should be synced with palettes.scss.\nexport interface Theme {\n  colorPrefilled: string;\n  colorSolved: string;\n  colorDraft: string;\n  colorHighlightFg: string;\n  colorHighlightBg1: string;\n  colorHighlightBg2: string;\n  colorBg: string;\n}\n\nconst CURRENT_THEME: Theme = {\n  colorPrefilled: '#050505',\n  colorSolved: '#156363',\n  colorDraft: '#447862',\n  colorHighlightFg: '#007896',\n  colorHighlightBg1: rgba('#dcc1c3', 1),\n  colorHighlightBg2: rgba('#dcd1d1', 0.5),\n  colorBg: '#fefefe',\n};\n\nexport function getCurrentTheme(): Theme {\n  return CURRENT_THEME;\n}\n\nfunction rgba(hex: string, alpha: number): string {\n  hex = hex.replace('#', '');\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\n\nconst CSS_JS_VAR_MAP: Record<string, string> = {\n  'color-prefilled': 'colorPrefilled',\n  'color-solved': 'colorSolved',\n  'color-draft': 'colorDraft',\n  'color-highlight-fg': 'colorHighlightFg',\n  'color-highlight-bg1': 'colorHighlightBg1',\n  'color-highlight-bg2': 'colorHighlightBg2',\n  'color-bg': 'colorBg',\n} as const;\n\n// This function should be called on init.\nexport function init() {\n  setTheme('default');\n}\n\nfunction setTheme(name: string) {\n  for (const cssProp in CSS_JS_VAR_MAP) {\n    const jsProp = CSS_JS_VAR_MAP[cssProp];\n    const cssVar = `--${name}-${cssProp}`;\n    const val = window.getComputedStyle(document.body).getPropertyValue(cssVar);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (CURRENT_THEME as any)[jsProp] = val;\n    document.documentElement.style.setProperty(`--${cssProp}`, val);\n  }\n}\n","export const MAX_NUMBER = 9;\nexport const CELLS_NUMBER = MAX_NUMBER * MAX_NUMBER;\nconst CHAR_FOR_EMPTY_CELL = '.';\nconst NUMBER_FOR_EMPTY_CELL = 0;\nfunction assertIndexInRange(value, desc) {\n    if (!Number.isInteger(value) || value < 0 || value >= MAX_NUMBER) {\n        throw new RangeError(`Invalid ${desc}: ${value}`);\n    }\n}\nfunction assertCellValueInRange(value) {\n    if (!Number.isInteger(value) || value < 1 || value > MAX_NUMBER) {\n        throw new RangeError(`Invalid cell value: ${value}`);\n    }\n}\nclass CellValueSet {\n    bitmap;\n    constructor(initValue = false) {\n        this.bitmap = new Array(MAX_NUMBER + 1).fill(initValue);\n    }\n    clone() {\n        const ret = new CellValueSet();\n        for (let i = 0; i < this.bitmap.length; i++) {\n            ret.bitmap[i] = this.bitmap[i];\n        }\n        return ret;\n    }\n    add(value) {\n        this.bitmap[value] = true;\n        return this;\n    }\n    delete(value) {\n        const ret = this.bitmap[value];\n        this.bitmap[value] = false;\n        return ret;\n    }\n    has(value) {\n        return this.bitmap[value];\n    }\n    clear() {\n        this.bitmap.fill(false);\n    }\n    addAll() {\n        this.bitmap.fill(true);\n    }\n    hasAll() {\n        for (let i = 1; i <= MAX_NUMBER; i++) {\n            if (!this.bitmap[i])\n                return false;\n        }\n        return true;\n    }\n    getUnique() {\n        let ret = null;\n        for (let i = 1; i <= MAX_NUMBER; i++) {\n            if (!this.bitmap[i])\n                continue;\n            if (ret === null) {\n                ret = i;\n            }\n            else {\n                return null;\n            }\n        }\n        return ret;\n    }\n    toString() {\n        let ret = '';\n        for (let i = 1; i <= MAX_NUMBER; i++) {\n            if (this.bitmap[i])\n                ret += `${i} `;\n        }\n        return ret + `: ${this.getUnique()}`;\n    }\n}\nexport class Coordinates {\n    x;\n    y;\n    linearIndex;\n    squareIndex;\n    constructor(x, y) {\n        assertIndexInRange(x, 'x');\n        assertIndexInRange(y, 'y');\n        this.x = x;\n        this.y = y;\n        this.linearIndex = x + y * MAX_NUMBER;\n        this.squareIndex = Math.floor(x / 3) + Math.floor(y / 3) * 3;\n    }\n    static fromLinearIndex(i) {\n        return new Coordinates(i % MAX_NUMBER, Math.floor(i / MAX_NUMBER));\n    }\n    toString() {\n        return `(x: ${this.x}, y: ${this.y}, square: ${this.squareIndex})`;\n    }\n}\nexport class Cell {\n    coordinate;\n    value;\n    constructor(coordinate, value) {\n        if (value !== null) {\n            assertCellValueInRange(value);\n        }\n        this.coordinate = coordinate;\n        this.value = value;\n    }\n    toChar() {\n        return this.value === null ? CHAR_FOR_EMPTY_CELL : this.value.toString();\n    }\n    static fromChar(coordinate, char) {\n        if (char === CHAR_FOR_EMPTY_CELL) {\n            return new Cell(coordinate, null);\n        }\n        return new Cell(coordinate, parseInt(char));\n    }\n    static fromNumber(coordinate, val) {\n        if (val === NUMBER_FOR_EMPTY_CELL) {\n            return new Cell(coordinate, null);\n        }\n        return new Cell(coordinate, val);\n    }\n}\nexport function printCells(cells) {\n    return cells.map(cell => cell.toChar()).join('');\n}\nexport function validateCells(cells, strict = false) {\n    if (cells.length !== MAX_NUMBER) {\n        throw new Error(`Got cell size ${cells.length}, want ${MAX_NUMBER}`);\n    }\n    const values = new CellValueSet();\n    for (const cell of cells) {\n        if (cell.value === null) {\n            continue;\n        }\n        if (values.has(cell.value)) {\n            return false;\n        }\n    }\n    return !strict || values.hasAll();\n}\nexport var SolvingCellState;\n(function (SolvingCellState) {\n    SolvingCellState[\"PREFILLED\"] = \"Prefilled\";\n    SolvingCellState[\"SOLVING\"] = \"Solving\";\n    SolvingCellState[\"SOLVED\"] = \"Solved\";\n})(SolvingCellState || (SolvingCellState = {}));\nexport class SolvingCell extends Cell {\n    state;\n    draftNumbers;\n    static newPrefilled(coordinate, value) {\n        return new SolvingCell(coordinate, SolvingCellState.PREFILLED, value);\n    }\n    static newSolving(coordinate) {\n        return new SolvingCell(coordinate, SolvingCellState.SOLVING, null);\n    }\n    constructor(coordinate, state, value) {\n        super(coordinate, value);\n        this.state = state;\n        this.draftNumbers = new CellValueSet(false);\n    }\n    clone() {\n        const ret = new SolvingCell(this.coordinate, this.state, this.value);\n        ret.draftNumbers = this.draftNumbers.clone();\n        return ret;\n    }\n    hasNumber() {\n        switch (this.state) {\n            case SolvingCellState.PREFILLED:\n            case SolvingCellState.SOLVED:\n                return true;\n            case SolvingCellState.SOLVING:\n                return false;\n        }\n    }\n    addAllDraftNumber() {\n        for (let i = 1; i <= MAX_NUMBER; i++) {\n            this.draftNumbers.add(i);\n        }\n    }\n    hasDraftNumber(value) {\n        return this.draftNumbers.has(value);\n    }\n    addDraftNumber(value) {\n        this.draftNumbers.add(value);\n    }\n    removeDraftNumber(value) {\n        this.draftNumbers.delete(value);\n    }\n    fillNumber(value) {\n        assertCellValueInRange(value);\n        this.value = value;\n        this.draftNumbers.clear();\n        this.state = SolvingCellState.SOLVED;\n    }\n    toString() {\n        return `${this.coordinate} state: ${this.state}, possibleValues: ${this.draftNumbers}`;\n    }\n}\nexport class GenericBoard {\n    cells;\n    constructor(cells) {\n        for (let i = 0; i < CELLS_NUMBER; i++) {\n            if (cells[i].coordinate.linearIndex !== i) {\n                throw new Error(`Invalid cell ${cells[i]}`);\n            }\n        }\n        this.cells = cells;\n    }\n    static createBoardFromString(chars) {\n        // Drop all empty chars.\n        chars = chars.replace(/\\s/g, '');\n        if (chars.length !== CELLS_NUMBER) {\n            throw new Error(`Input char length ${chars.length}, want ${CELLS_NUMBER}`);\n        }\n        const cells = new Array();\n        for (let i = 0; i < CELLS_NUMBER; i++) {\n            cells.push(Cell.fromChar(Coordinates.fromLinearIndex(i), chars[i]));\n        }\n        return new GenericBoard(cells);\n    }\n    static createBoardFromUint8Array(numbers) {\n        if (numbers.length !== CELLS_NUMBER) {\n            throw new Error(`Input char length ${numbers.length}, want ${CELLS_NUMBER}`);\n        }\n        const cells = new Array();\n        for (let i = 0; i < CELLS_NUMBER; i++) {\n            cells.push(Cell.fromNumber(Coordinates.fromLinearIndex(i), numbers[i]));\n        }\n        return new GenericBoard(cells);\n    }\n    printBoard() {\n        let ret = '';\n        for (let i = 0; i < CELLS_NUMBER; i++) {\n            ret += this.cells[i].toChar();\n            if (i % MAX_NUMBER === MAX_NUMBER - 1) {\n                ret += '\\n';\n            }\n        }\n        return ret;\n    }\n    getCellByCoord(coord) {\n        return this.cells[coord.linearIndex];\n    }\n    getCellsByRow(rowIndex) {\n        assertIndexInRange(rowIndex, 'rowIndex');\n        const ret = new Array();\n        for (let i = 0; i < MAX_NUMBER; i++) {\n            ret.push(this.cells[rowIndex * MAX_NUMBER + i]);\n        }\n        return ret;\n    }\n    getCellsByColumn(columnIndex) {\n        assertIndexInRange(columnIndex, 'columnIndex');\n        const ret = new Array();\n        for (let i = 0; i < MAX_NUMBER; i++) {\n            ret.push(this.cells[i * MAX_NUMBER + columnIndex]);\n        }\n        return ret;\n    }\n    getCellsBySquare(squareIndex) {\n        assertIndexInRange(squareIndex, 'squareIndex');\n        return this.cells.filter(cell => cell.coordinate.squareIndex === squareIndex);\n    }\n    getCellsByNeighborToCoord(coord) {\n        return mergeCellLists([\n            this.getCellsByColumn(coord.x),\n            this.getCellsByRow(coord.y),\n            this.getCellsBySquare(coord.squareIndex),\n        ]);\n    }\n    validate(strict) {\n        for (let i = 0; i < MAX_NUMBER; i++) {\n            if (!validateCells(this.getCellsByRow(i), strict))\n                return false;\n            if (!validateCells(this.getCellsByColumn(i), strict))\n                return false;\n            if (!validateCells(this.getCellsBySquare(i), strict))\n                return false;\n        }\n        return true;\n    }\n}\nexport function mergeCellLists(arrays) {\n    const seen = new Set();\n    const merged = [];\n    for (const arr of arrays) {\n        if (arr) {\n            for (const cell of arr) {\n                if (cell) {\n                    if (!seen.has(cell)) {\n                        seen.add(cell);\n                        merged.push(cell);\n                    }\n                }\n            }\n        }\n    }\n    return merged;\n}\n//# sourceMappingURL=types.js.map","export const MAX_NUMBER = 9;\nexport const CELLS_NUMBER = MAX_NUMBER * MAX_NUMBER;\nconst CHAR_FOR_EMPTY_CELL = '.';\nconst NUMBER_FOR_EMPTY_CELL = 0;\n\nfunction assertIndexInRange(value: number, desc: string): void {\n  if (!Number.isInteger(value) || value < 0 || value >= MAX_NUMBER) {\n    throw new RangeError(`Invalid ${desc}: ${value}`);\n  }\n}\n\nfunction assertCellValueInRange(value: number): void {\n  if (!Number.isInteger(value) || value < 1 || value > MAX_NUMBER) {\n    throw new RangeError(`Invalid cell value: ${value}`);\n  }\n}\n\nclass CellValueSet {\n  readonly bitmap: Array<boolean>;\n\n  constructor(initValue = false) {\n    this.bitmap = new Array<boolean>(MAX_NUMBER + 1).fill(initValue);\n  }\n\n  clone(): CellValueSet {\n    const ret = new CellValueSet();\n    for (let i = 0; i < this.bitmap.length; i++) {\n      ret.bitmap[i] = this.bitmap[i];\n    }\n    return ret;\n  }\n\n  add(value: number): CellValueSet {\n    this.bitmap[value] = true;\n    return this;\n  }\n  delete(value: number): boolean {\n    const ret = this.bitmap[value];\n    this.bitmap[value] = false;\n    return ret;\n  }\n  has(value: number): boolean {\n    return this.bitmap[value];\n  }\n\n  clear(): void {\n    this.bitmap.fill(false);\n  }\n\n  addAll(): void {\n    this.bitmap.fill(true);\n  }\n  hasAll(): boolean {\n    for (let i = 1; i <= MAX_NUMBER; i++) {\n      if (!this.bitmap[i]) return false;\n    }\n    return true;\n  }\n  getUnique(): number | null {\n    let ret = null;\n    for (let i = 1; i <= MAX_NUMBER; i++) {\n      if (!this.bitmap[i]) continue;\n      if (ret === null) {\n        ret = i;\n      } else {\n        return null;\n      }\n    }\n    return ret;\n  }\n  toString(): string {\n    let ret = '';\n    for (let i = 1; i <= MAX_NUMBER; i++) {\n      if (this.bitmap[i]) ret += `${i} `;\n    }\n    return ret + `: ${this.getUnique()}`;\n  }\n}\n\nexport class Coordinates {\n  readonly x: number;\n  readonly y: number;\n  readonly linearIndex: number;\n  readonly squareIndex: number;\n\n  constructor(x: number, y: number) {\n    assertIndexInRange(x, 'x');\n    assertIndexInRange(y, 'y');\n    this.x = x;\n    this.y = y;\n    this.linearIndex = x + y * MAX_NUMBER;\n    this.squareIndex = Math.floor(x / 3) + Math.floor(y / 3) * 3;\n  }\n\n  static fromLinearIndex(i: number): Coordinates {\n    return new Coordinates(i % MAX_NUMBER, Math.floor(i / MAX_NUMBER));\n  }\n\n  toString(): string {\n    return `(x: ${this.x}, y: ${this.y}, square: ${this.squareIndex})`;\n  }\n}\n\nexport class Cell {\n  readonly coordinate: Coordinates;\n  value: number | null;\n\n  constructor(coordinate: Coordinates, value: number | null) {\n    if (value !== null) {\n      assertCellValueInRange(value);\n    }\n    this.coordinate = coordinate;\n    this.value = value;\n  }\n\n  toChar(): string {\n    return this.value === null ? CHAR_FOR_EMPTY_CELL : this.value.toString();\n  }\n\n  static fromChar(coordinate: Coordinates, char: string): Cell {\n    if (char === CHAR_FOR_EMPTY_CELL) {\n      return new Cell(coordinate, null);\n    }\n    return new Cell(coordinate, parseInt(char));\n  }\n\n  static fromNumber(coordinate: Coordinates, val: number): Cell {\n    if (val === NUMBER_FOR_EMPTY_CELL) {\n      return new Cell(coordinate, null);\n    }\n    return new Cell(coordinate, val);\n  }\n}\n\nexport function printCells(cells: ReadonlyArray<Cell>): string {\n  return cells.map(cell => cell.toChar()).join('');\n}\n\nexport function validateCells(\n  cells: ReadonlyArray<Cell>,\n  strict = false,\n): boolean {\n  if (cells.length !== MAX_NUMBER) {\n    throw new Error(`Got cell size ${cells.length}, want ${MAX_NUMBER}`);\n  }\n\n  const values = new CellValueSet();\n  for (const cell of cells) {\n    if (cell.value === null) {\n      continue;\n    }\n    if (values.has(cell.value)) {\n      return false;\n    }\n  }\n\n  return !strict || values.hasAll();\n}\n\nexport enum SolvingCellState {\n  PREFILLED = 'Prefilled',\n  SOLVING = 'Solving',\n  SOLVED = 'Solved',\n}\n\nexport class SolvingCell extends Cell {\n  state: SolvingCellState;\n  draftNumbers: CellValueSet;\n\n  static newPrefilled(coordinate: Coordinates, value: number): SolvingCell {\n    return new SolvingCell(coordinate, SolvingCellState.PREFILLED, value);\n  }\n\n  static newSolving(coordinate: Coordinates): SolvingCell {\n    return new SolvingCell(coordinate, SolvingCellState.SOLVING, null);\n  }\n\n  private constructor(\n    coordinate: Coordinates,\n    state: SolvingCellState,\n    value: number | null,\n  ) {\n    super(coordinate, value);\n    this.state = state;\n    this.draftNumbers = new CellValueSet(false);\n  }\n\n  clone(): SolvingCell {\n    const ret = new SolvingCell(this.coordinate, this.state, this.value);\n    ret.draftNumbers = this.draftNumbers.clone();\n    return ret;\n  }\n\n  hasNumber(): boolean {\n    switch (this.state) {\n      case SolvingCellState.PREFILLED:\n      case SolvingCellState.SOLVED:\n        return true;\n      case SolvingCellState.SOLVING:\n        return false;\n    }\n  }\n\n  addAllDraftNumber(): void {\n    for (let i = 1; i <= MAX_NUMBER; i++) {\n      this.draftNumbers.add(i);\n    }\n  }\n\n  hasDraftNumber(value: number): boolean {\n    return this.draftNumbers.has(value);\n  }\n\n  addDraftNumber(value: number): void {\n    this.draftNumbers.add(value);\n  }\n\n  removeDraftNumber(value: number): void {\n    this.draftNumbers.delete(value);\n  }\n\n  fillNumber(value: number): void {\n    assertCellValueInRange(value);\n    this.value = value;\n    this.draftNumbers.clear();\n    this.state = SolvingCellState.SOLVED;\n  }\n\n  toString(): string {\n    return `${this.coordinate} state: ${this.state}, possibleValues: ${this.draftNumbers}`;\n  }\n}\n\nexport class GenericBoard<T extends Cell> {\n  readonly cells: Array<T>;\n\n  constructor(cells: Array<T>) {\n    for (let i = 0; i < CELLS_NUMBER; i++) {\n      if (cells[i].coordinate.linearIndex !== i) {\n        throw new Error(`Invalid cell ${cells[i]}`);\n      }\n    }\n    this.cells = cells;\n  }\n\n  static createBoardFromString(chars: string): GenericBoard<Cell> {\n    // Drop all empty chars.\n    chars = chars.replace(/\\s/g, '');\n    if (chars.length !== CELLS_NUMBER) {\n      throw new Error(\n        `Input char length ${chars.length}, want ${CELLS_NUMBER}`,\n      );\n    }\n\n    const cells = new Array<Cell>();\n    for (let i = 0; i < CELLS_NUMBER; i++) {\n      cells.push(Cell.fromChar(Coordinates.fromLinearIndex(i), chars[i]));\n    }\n\n    return new GenericBoard(cells);\n  }\n\n  static createBoardFromUint8Array(\n    numbers: Readonly<Uint8Array>,\n  ): GenericBoard<Cell> {\n    if (numbers.length !== CELLS_NUMBER) {\n      throw new Error(\n        `Input char length ${numbers.length}, want ${CELLS_NUMBER}`,\n      );\n    }\n    const cells = new Array<Cell>();\n    for (let i = 0; i < CELLS_NUMBER; i++) {\n      cells.push(Cell.fromNumber(Coordinates.fromLinearIndex(i), numbers[i]));\n    }\n    return new GenericBoard(cells);\n  }\n\n  printBoard(): string {\n    let ret = '';\n    for (let i = 0; i < CELLS_NUMBER; i++) {\n      ret += this.cells[i].toChar();\n      if (i % MAX_NUMBER === MAX_NUMBER - 1) {\n        ret += '\\n';\n      }\n    }\n    return ret;\n  }\n\n  getCellByCoord(coord: Coordinates): T {\n    return this.cells[coord.linearIndex];\n  }\n\n  getCellsByRow(rowIndex: number): ReadonlyArray<T> {\n    assertIndexInRange(rowIndex, 'rowIndex');\n    const ret = new Array<T>();\n    for (let i = 0; i < MAX_NUMBER; i++) {\n      ret.push(this.cells[rowIndex * MAX_NUMBER + i]);\n    }\n    return ret;\n  }\n\n  getCellsByColumn(columnIndex: number): ReadonlyArray<T> {\n    assertIndexInRange(columnIndex, 'columnIndex');\n    const ret = new Array<T>();\n    for (let i = 0; i < MAX_NUMBER; i++) {\n      ret.push(this.cells[i * MAX_NUMBER + columnIndex]);\n    }\n    return ret;\n  }\n\n  getCellsBySquare(squareIndex: number): ReadonlyArray<T> {\n    assertIndexInRange(squareIndex, 'squareIndex');\n    return this.cells.filter(\n      cell => cell.coordinate.squareIndex === squareIndex,\n    );\n  }\n\n  getCellsByNeighborToCoord(coord: Coordinates): ReadonlyArray<T> {\n    return mergeCellLists([\n      this.getCellsByColumn(coord.x),\n      this.getCellsByRow(coord.y),\n      this.getCellsBySquare(coord.squareIndex),\n    ]);\n  }\n\n  validate(strict: boolean): boolean {\n    for (let i = 0; i < MAX_NUMBER; i++) {\n      if (!validateCells(this.getCellsByRow(i), strict)) return false;\n      if (!validateCells(this.getCellsByColumn(i), strict)) return false;\n      if (!validateCells(this.getCellsBySquare(i), strict)) return false;\n    }\n    return true;\n  }\n}\n\nexport function mergeCellLists<T extends Cell>(\n  arrays: ReadonlyArray<ReadonlyArray<T>>,\n): ReadonlyArray<T> {\n  const seen = new Set<Cell>();\n  const merged: T[] = [];\n\n  for (const arr of arrays) {\n    if (arr) {\n      for (const cell of arr) {\n        if (cell) {\n          if (!seen.has(cell)) {\n            seen.add(cell);\n            merged.push(cell);\n          }\n        }\n      }\n    }\n  }\n\n  return merged;\n}\n\nexport type Board = GenericBoard<Cell>;\n","import { BoardUi, MoveDirection } from './board_ui.js';\nfunction secondsToHumanReadable(seconds) {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    const formattedMinutes = String(minutes).padStart(2, '0');\n    const formattedSeconds = String(remainingSeconds).padStart(2, '0');\n    return `${formattedMinutes}:${formattedSeconds}`;\n}\nfunction keyCodeToDirection(code) {\n    switch (code) {\n        case 'ArrowUp':\n            return MoveDirection.UP;\n        case 'ArrowDown':\n            return MoveDirection.DOWN;\n        case 'ArrowLeft':\n            return MoveDirection.LEFT;\n        case 'ArrowRight':\n            return MoveDirection.RIGHT;\n        default:\n            throw new Error('Unreachable');\n    }\n}\nconst HTML_CONTENT = `\n<p id=\"notification\" class=\"hidden\">Prompt</p>\n<div id=\"board-banner\">\n  <span>Time:&nbsp;<span id=\"value-timer\">0:00</span></span>\n  <span>Mistakes:&nbsp;<span id=\"value-mistakes\">0</span></span>\n  <span>Remaining:&nbsp;<span id=\"value-remaining\">0</span></span>\n</div>\n<div id=\"board\" style=\"position: relative;\"></div>\n<div id=\"board-buttons\">\n  <span class=\"btn-default enabled\" id=\"btn-new-game\">New Game</span>\n  <span class=\"btn-default enabled\" id=\"btn-quick-draft\">Quick Draft</span>\n  <span class=\"btn-default enabled\" id=\"btn-save\">Save</span>\n  <span class=\"btn-default enabled\" id=\"btn-load\">Load</span>\n</div>`;\n/**\n * In the UI of the game page, there are mainly 3 parts.\n * - Banner: contains the game statistics;\n * - Board: displays the puzzle;\n * - Buttons: contains actions for the game.\n */\nexport class GameController {\n    game;\n    pageDom;\n    boardUi;\n    constructor(game, pageDom) {\n        this.game = game;\n        this.pageDom = pageDom;\n        // Update the internal html.\n        this.pageDom.setHTMLUnsafe(HTML_CONTENT);\n        // Initialize the banner.\n        this.refreshBanner();\n        // Create the board drawing.\n        const boardDom = document.getElementById('board');\n        this.boardUi = new BoardUi(boardDom, game.puzzleBoard, this.handleNumberInput.bind(this), {\n            size: boardDom.clientWidth,\n            highlightCursorNeighbors: true,\n            highlightNumber: true,\n            highlightNumberNeighbors: true,\n        });\n        // Set up button actions.\n        const quickDraftBtn = document.getElementById('btn-quick-draft');\n        quickDraftBtn?.addEventListener('click', ev => {\n            ev.stopPropagation();\n            this.game.recalculateDraftNumbers();\n            this.boardUi.updateBoard();\n        });\n        const newGameBtn = document.getElementById('btn-new-game');\n        newGameBtn.addEventListener('click', ev => {\n            ev.stopPropagation();\n            if (confirm('Abort the current game and start a new one?') === true) {\n                location.reload();\n            }\n        });\n        const saveBtn = document.getElementById('btn-save');\n        const loadBtn = document.getElementById('btn-load');\n        const updateSaveLoadBtnState = () => {\n            if (game.savedPuzzleBoard !== null) {\n                loadBtn.classList.add('enabled');\n                loadBtn.classList.remove('disabled');\n            }\n            else {\n                loadBtn.classList.remove('enabled');\n                loadBtn.classList.add('disabled');\n            }\n        };\n        updateSaveLoadBtnState();\n        saveBtn.addEventListener('click', ev => {\n            ev.stopPropagation();\n            game.saveState();\n            updateSaveLoadBtnState();\n            this.showNotification('Saved');\n        });\n        loadBtn.addEventListener('click', ev => {\n            ev.stopPropagation();\n            if (!loadBtn.classList.contains('enabled')) {\n                return;\n            }\n            if (confirm('Load previously saved state?') === true) {\n                game.loadState();\n                this.boardUi.updateBoard(game.puzzleBoard);\n                updateSaveLoadBtnState();\n                this.showNotification('Loaded');\n            }\n        });\n    }\n    // Handle keyboard event for the game. Returns whether the event is consumed by this component.\n    handleKeyDownEvent(ev) {\n        console.debug(ev);\n        switch (ev.code) {\n            case 'ArrowUp':\n            case 'ArrowDown':\n            case 'ArrowLeft':\n            case 'ArrowRight':\n                this.boardUi.moveCursor(keyCodeToDirection(ev.code));\n                return true;\n            case 'Digit1':\n            case 'Digit2':\n            case 'Digit3':\n            case 'Digit4':\n            case 'Digit5':\n            case 'Digit6':\n            case 'Digit7':\n            case 'Digit8':\n            case 'Digit9':\n                this.handleDigitKeyEvent(ev);\n                return true;\n            case 'KeyD':\n                this.game.recalculateDraftNumbers();\n                this.boardUi.updateBoard();\n                return true;\n            default:\n                // Do nothing now.\n                return false;\n        }\n    }\n    // Note: We cannot declare vars in a case branch, so have a separate function here.\n    handleDigitKeyEvent(ev) {\n        const value = parseInt(ev.code.charAt(5));\n        if (this.boardUi.cursorCoord !== null) {\n            this.handleNumberInput(value, !ev.shiftKey);\n        }\n    }\n    handleNumberInput(value, draftMode) {\n        if (this.boardUi.cursorCoord === null) {\n            return;\n        }\n        console.debug('hit %d', value);\n        if (!draftMode) {\n            this.game.fillInNumber(this.boardUi.cursorCoord, value);\n        }\n        else {\n            this.game.toggleDraftNumber(this.boardUi.cursorCoord, value);\n        }\n        this.boardUi.updateBoard();\n        this.refreshBanner(true);\n    }\n    handleOutOfBoundClick() {\n        // Reset cursor if we lost the focus.\n        this.boardUi.updateCursor(null);\n    }\n    showNotification(msg) {\n        const dom = document.getElementById('notification');\n        dom.innerText = msg;\n        dom.classList.remove('hidden');\n        setTimeout(() => {\n            dom.classList.add('hidden');\n        }, 2500);\n    }\n    refreshBanner(once = false) {\n        const timerDom = document.getElementById('value-timer');\n        const mistakesDom = document.getElementById('value-mistakes');\n        const remainingDom = document.getElementById('value-remaining');\n        timerDom.textContent = `${secondsToHumanReadable(this.game.getElapsedSeconds())}`;\n        mistakesDom.textContent = `${this.game.mistakes}`;\n        remainingDom.textContent = `${this.game.getEmptyCellsCount()}`;\n        // TODO: Add stop condition.\n        if (!once) {\n            // We are showing a timer on the UI, so refresh it every second.\n            setTimeout(() => this.refreshBanner(), 1000);\n        }\n    }\n}\n//# sourceMappingURL=game_controller.js.map","import {BoardUi, MoveDirection} from './board_ui.js';\nimport {Game} from './game.js';\n\nfunction secondsToHumanReadable(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = Math.floor(seconds % 60);\n  const formattedMinutes = String(minutes).padStart(2, '0');\n  const formattedSeconds = String(remainingSeconds).padStart(2, '0');\n  return `${formattedMinutes}:${formattedSeconds}`;\n}\n\nfunction keyCodeToDirection(code: string): MoveDirection {\n  switch (code) {\n    case 'ArrowUp':\n      return MoveDirection.UP;\n    case 'ArrowDown':\n      return MoveDirection.DOWN;\n    case 'ArrowLeft':\n      return MoveDirection.LEFT;\n    case 'ArrowRight':\n      return MoveDirection.RIGHT;\n    default:\n      throw new Error('Unreachable');\n  }\n}\n\nconst HTML_CONTENT = `\n<p id=\"notification\" class=\"hidden\">Prompt</p>\n<div id=\"board-banner\">\n  <span>Time:&nbsp;<span id=\"value-timer\">0:00</span></span>\n  <span>Mistakes:&nbsp;<span id=\"value-mistakes\">0</span></span>\n  <span>Remaining:&nbsp;<span id=\"value-remaining\">0</span></span>\n</div>\n<div id=\"board\" style=\"position: relative;\"></div>\n<div id=\"board-buttons\">\n  <span class=\"btn-default enabled\" id=\"btn-new-game\">New Game</span>\n  <span class=\"btn-default enabled\" id=\"btn-quick-draft\">Quick Draft</span>\n  <span class=\"btn-default enabled\" id=\"btn-save\">Save</span>\n  <span class=\"btn-default enabled\" id=\"btn-load\">Load</span>\n</div>`;\n\n/**\n * In the UI of the game page, there are mainly 3 parts.\n * - Banner: contains the game statistics;\n * - Board: displays the puzzle;\n * - Buttons: contains actions for the game.\n */\nexport class GameController {\n  private readonly game: Game;\n  private readonly pageDom: HTMLElement;\n  private readonly boardUi: BoardUi;\n\n  constructor(game: Game, pageDom: HTMLElement) {\n    this.game = game;\n    this.pageDom = pageDom;\n\n    // Update the internal html.\n    this.pageDom.setHTMLUnsafe(HTML_CONTENT);\n\n    // Initialize the banner.\n    this.refreshBanner();\n\n    // Create the board drawing.\n    const boardDom = document.getElementById('board')!;\n    this.boardUi = new BoardUi(\n      boardDom,\n      game.puzzleBoard,\n      this.handleNumberInput.bind(this),\n      {\n        size: boardDom.clientWidth,\n        highlightCursorNeighbors: true,\n        highlightNumber: true,\n        highlightNumberNeighbors: true,\n      },\n    );\n\n    // Set up button actions.\n    const quickDraftBtn = document.getElementById('btn-quick-draft');\n    quickDraftBtn?.addEventListener('click', ev => {\n      ev.stopPropagation();\n      this.game.recalculateDraftNumbers();\n      this.boardUi.updateBoard();\n    });\n\n    const newGameBtn = document.getElementById('btn-new-game');\n    newGameBtn!.addEventListener('click', ev => {\n      ev.stopPropagation();\n      if (confirm('Abort the current game and start a new one?') === true) {\n        location.reload();\n      }\n    });\n\n    const saveBtn = document.getElementById('btn-save')!;\n    const loadBtn = document.getElementById('btn-load')!;\n    const updateSaveLoadBtnState = () => {\n      if (game.savedPuzzleBoard !== null) {\n        loadBtn.classList.add('enabled');\n        loadBtn.classList.remove('disabled');\n      } else {\n        loadBtn.classList.remove('enabled');\n        loadBtn.classList.add('disabled');\n      }\n    };\n    updateSaveLoadBtnState();\n    saveBtn!.addEventListener('click', ev => {\n      ev.stopPropagation();\n      game.saveState();\n      updateSaveLoadBtnState();\n      this.showNotification('Saved');\n    });\n    loadBtn!.addEventListener('click', ev => {\n      ev.stopPropagation();\n      if (!loadBtn.classList.contains('enabled')) {\n        return;\n      }\n      if (confirm('Load previously saved state?') === true) {\n        game.loadState();\n        this.boardUi.updateBoard(game.puzzleBoard);\n        updateSaveLoadBtnState();\n        this.showNotification('Loaded');\n      }\n    });\n  }\n\n  // Handle keyboard event for the game. Returns whether the event is consumed by this component.\n  handleKeyDownEvent(ev: KeyboardEvent): boolean {\n    console.debug(ev);\n    switch (ev.code) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        this.boardUi.moveCursor(keyCodeToDirection(ev.code));\n        return true;\n      case 'Digit1':\n      case 'Digit2':\n      case 'Digit3':\n      case 'Digit4':\n      case 'Digit5':\n      case 'Digit6':\n      case 'Digit7':\n      case 'Digit8':\n      case 'Digit9':\n        this.handleDigitKeyEvent(ev);\n        return true;\n      case 'KeyD':\n        this.game.recalculateDraftNumbers();\n        this.boardUi.updateBoard();\n        return true;\n      default:\n        // Do nothing now.\n        return false;\n    }\n  }\n\n  // Note: We cannot declare vars in a case branch, so have a separate function here.\n  private handleDigitKeyEvent(ev: KeyboardEvent) {\n    const value = parseInt(ev.code.charAt(5));\n    if (this.boardUi.cursorCoord !== null) {\n      this.handleNumberInput(value, !ev.shiftKey);\n    }\n  }\n\n  private handleNumberInput(value: number, draftMode: boolean) {\n    if (this.boardUi.cursorCoord === null) {\n      return;\n    }\n    console.debug('hit %d', value);\n    if (!draftMode) {\n      this.game.fillInNumber(this.boardUi.cursorCoord, value);\n    } else {\n      this.game.toggleDraftNumber(this.boardUi.cursorCoord, value);\n    }\n    this.boardUi.updateBoard();\n    this.refreshBanner(true);\n  }\n\n  handleOutOfBoundClick() {\n    // Reset cursor if we lost the focus.\n    this.boardUi.updateCursor(null);\n  }\n\n  private showNotification(msg: string) {\n    const dom = document.getElementById('notification')!;\n    dom.innerText = msg;\n    dom.classList.remove('hidden');\n    setTimeout(() => {\n      dom.classList.add('hidden');\n    }, 2500);\n  }\n\n  private refreshBanner(once = false) {\n    const timerDom = document.getElementById('value-timer')!;\n    const mistakesDom = document.getElementById('value-mistakes')!;\n    const remainingDom = document.getElementById('value-remaining')!;\n\n    timerDom.textContent = `${secondsToHumanReadable(this.game.getElapsedSeconds())}`;\n    mistakesDom.textContent = `${this.game.mistakes}`;\n    remainingDom.textContent = `${this.game.getEmptyCellsCount()}`;\n\n    // TODO: Add stop condition.\n    if (!once) {\n      // We are showing a timer on the UI, so refresh it every second.\n      setTimeout(() => this.refreshBanner(), 1000);\n    }\n  }\n}\n","import { Coordinates, mergeCellLists, SolvingCellState } from './types.js';\nimport * as theme from './theme.js';\nfunction drawLine(ctx, x1, y1, x2, y2, style) {\n    ctx.strokeStyle = style.color;\n    ctx.lineWidth = style.width ? style.width : 1;\n    // Square is better for drawing border of the grid.\n    ctx.lineCap = 'square';\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\nfunction getCanvas2DContext(canvas) {\n    return canvas.getContext('2d');\n}\nfunction clearCanvas(canvas) {\n    const ctx = getCanvas2DContext(canvas);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\nexport var MoveDirection;\n(function (MoveDirection) {\n    MoveDirection[MoveDirection[\"UP\"] = 0] = \"UP\";\n    MoveDirection[MoveDirection[\"DOWN\"] = 1] = \"DOWN\";\n    MoveDirection[MoveDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n    MoveDirection[MoveDirection[\"LEFT\"] = 3] = \"LEFT\";\n})(MoveDirection || (MoveDirection = {}));\nconst CANVAS_MARGIN = 5;\nconst VIRTUAL_KB_HTML = `\n<div id=\"draft-mode-line\">\n  <label class=\"switch\">\n    <input type=\"checkbox\" id=\"kb-draft-mode-switch\" checked=\"true\">\n    <span class=\"slider\"></span>\n  </label>\n  <span>Draft mode</span>\n</div>\n<div div class=\"keyboard\" id=\"keyboard\"></div>\n`;\nconst VIRTUAL_KEYBOARD_ID = 'num-keyboard';\n// Shows a keyboard for inputting digits for the Sudoku game.\nclass VirtualKeyboard {\n    cb;\n    container;\n    width;\n    height;\n    constructor(parent, keyInputCallback) {\n        this.container = document.createElement('div');\n        this.container.id = VIRTUAL_KEYBOARD_ID;\n        parent.appendChild(this.container);\n        this.container.setHTMLUnsafe(VIRTUAL_KB_HTML);\n        this.container.classList.add('fading-fast');\n        this.cb = keyInputCallback;\n        const keyboard = document.getElementById('keyboard');\n        const keyboardDraftModeSwitch = document.getElementById('kb-draft-mode-switch');\n        for (let i = 1; i <= 9; i++) {\n            const key = document.createElement('div');\n            key.classList.add('key');\n            key.classList.add('btn-default');\n            key.textContent = `${i}`;\n            key.dataset['value'] = `${i}`;\n            key.addEventListener('click', ev => {\n                ev.preventDefault();\n                ev.stopPropagation();\n                if (key.classList.contains('disabled'))\n                    return;\n                this.cb(i, keyboardDraftModeSwitch.checked);\n            });\n            keyboard.appendChild(key);\n        }\n        // Scope the click events.\n        this.container.addEventListener('click', ev => {\n            ev.stopPropagation();\n        });\n        // This needs to be called before hide(), otherwise they will be all 0s.\n        this.width = this.container.clientWidth;\n        this.height = this.container.clientHeight;\n        this.hide();\n    }\n    show(boardUi, coord) {\n        // Calculate the location.\n        const w = this.width;\n        const h = this.height;\n        const x1 = boardUi.getCanvasPosForIdx(coord.x);\n        const x2 = boardUi.getCanvasPosForIdx(coord.x + 1);\n        const y1 = boardUi.getCanvasPosForIdx(coord.y);\n        const y2 = boardUi.getCanvasPosForIdx(coord.y + 1);\n        const MARGIN = 8;\n        const x = x1 - w - MARGIN > 0 ? x1 - w - MARGIN : x2 + MARGIN / 2;\n        const y = y2 + h < boardUi.config.size ? y2 + MARGIN / 2 : y1 - MARGIN - h;\n        this.container.style.left = `${x}px`;\n        this.container.style.top = `${y}px`;\n        this.refreshNumbers(boardUi, coord);\n        // Show it.\n        const c = this.container;\n        c.classList.remove('hidden');\n        console.debug('display virtual keyboard at (%d, %d)', x, y);\n    }\n    refreshNumbers(boardUi, coord) {\n        // Hide unavailable numbers.\n        const draftNumbers = boardUi.gameBoard.getCellByCoord(coord).draftNumbers;\n        const availableNumbers = boardUi.gameBoard.getAvailableNumbersForCell(coord);\n        const keyboard = document.getElementById('keyboard');\n        keyboard.childNodes.forEach(node => {\n            const dom = node;\n            const value = parseInt(dom.dataset['value']);\n            if (availableNumbers.has(value)) {\n                dom.classList.add('enabled');\n                dom.classList.remove('disabled');\n            }\n            else {\n                dom.classList.add('disabled');\n                dom.classList.remove('enabled');\n            }\n            if (draftNumbers.has(value)) {\n                dom.classList.add('highlight');\n            }\n            else {\n                dom.classList.remove('highlight');\n            }\n        });\n    }\n    hide() {\n        console.debug('hide virtual keyboard');\n        this.container.classList.add('hidden');\n    }\n}\nexport class BoardUi {\n    config;\n    container;\n    gameBoard;\n    virtualKeyboard;\n    gridCanvas;\n    neighHighlightCanvas;\n    numberHighlightCanvas;\n    // The canvas layer for displaying numbers.\n    numbersCanvas;\n    // The canvas layer for displaying cursor.\n    cursorCanvas;\n    // The canvas layer for handling mouse event.\n    clickCanvas;\n    cursorCoord = null;\n    focusedNumber = null;\n    focusedLevel = 0;\n    constructor(container, gameBoard, digitInputCallback, config) {\n        this.container = container;\n        this.gameBoard = gameBoard;\n        this.virtualKeyboard = new VirtualKeyboard(this.container, (v, b) => {\n            // Do not hide in draft mode.\n            if (!b) {\n                this.virtualKeyboard.hide();\n            }\n            digitInputCallback(v, b);\n            if (this.cursorCoord) {\n                this.virtualKeyboard.refreshNumbers(this, this.cursorCoord);\n            }\n        });\n        this.updateConfig(config);\n        container.style.height = `${container.clientWidth}px`;\n    }\n    getTheme() {\n        return theme.getCurrentTheme();\n    }\n    getCellSize() {\n        return (this.config.size - CANVAS_MARGIN * 2) / 9;\n    }\n    getCanvasPosForIdx(index) {\n        return CANVAS_MARGIN + this.getCellSize() * index;\n    }\n    getIdxForCanvasPos(pos) {\n        for (let i = 0; i < 9; ++i) {\n            if (pos < this.getCanvasPosForIdx(i + 1) &&\n                pos > this.getCanvasPosForIdx(i)) {\n                return i;\n            }\n        }\n        return null;\n    }\n    updateBoard(board = null) {\n        if (board !== null) {\n            this.gameBoard = board;\n        }\n        this.redrawNumbers();\n        this.redrawHighlight();\n    }\n    updateConfig(config) {\n        this.config = config;\n        // Remove all canvas children at first.\n        Array.from(this.container.children).forEach(child => {\n            if (!(child instanceof HTMLCanvasElement)) {\n                return;\n            }\n            this.container.removeChild(child);\n        });\n        this.numberHighlightCanvas = this.createCanvas(1);\n        this.neighHighlightCanvas = this.createCanvas(2);\n        this.gridCanvas = this.createCanvas(3);\n        this.numbersCanvas = this.createCanvas(4);\n        this.cursorCanvas = this.createCanvas(5);\n        this.clickCanvas = this.createCanvas(6);\n        this.redrawGrid();\n        this.redrawNumbers();\n        this.clickCanvas.addEventListener('click', (ev) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // if (ev.detail > 1) {\n            //   return;\n            // }\n            console.debug(\"Handle click\");\n            this.virtualKeyboard.hide();\n            const rect = this.clickCanvas.getBoundingClientRect();\n            const x = this.getIdxForCanvasPos(ev.clientX - rect.left);\n            const y = this.getIdxForCanvasPos(ev.clientY - rect.top);\n            // Reset cursor if the click is out of bound.\n            if (x === null || y === null) {\n                this.updateCursor(null);\n            }\n            else {\n                const coord = new Coordinates(x, y);\n                this.updateCursor(coord);\n                // If the cell is empty, show keyboard.\n                let cell = this.gameBoard.getCellByCoord(coord);\n                if (cell.value === null) {\n                    this.virtualKeyboard.show(this, coord);\n                }\n                else {\n                    this.updateFocusedNumber(cell.value, 0);\n                }\n            }\n        });\n        this.clickCanvas.addEventListener('dblclick', (ev) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            console.debug(\"Handle double click\");\n            const rect = this.clickCanvas.getBoundingClientRect();\n            const x = this.getIdxForCanvasPos(ev.clientX - rect.left);\n            const y = this.getIdxForCanvasPos(ev.clientY - rect.top);\n            // Reset cursor if the click is out of bound.\n            if (x === null || y === null) {\n                this.updateFocusedNumber(null);\n            }\n            else {\n                const cell = this.gameBoard.getCellByCoord(new Coordinates(x, y));\n                // Allow double click to cancel selection.\n                this.updateFocusedNumber(cell.value === this.focusedNumber && this.focusedLevel === 1 ? null : cell.value, 1);\n            }\n        });\n    }\n    updateCursor(coord) {\n        console.debug('Set cursor to %s', coord);\n        if (coord === null) {\n            this.virtualKeyboard.hide();\n        }\n        // TODO: If the pos did not change, we can skip the following logic.\n        this.cursorCoord = coord;\n        this.redrawCursor();\n        this.redrawHighlight();\n    }\n    moveCursor(d) {\n        if (!this.cursorCoord)\n            return;\n        this.virtualKeyboard.hide();\n        let x = this.cursorCoord.x;\n        let y = this.cursorCoord.y;\n        switch (d) {\n            case MoveDirection.UP:\n                y -= 1;\n                break;\n            case MoveDirection.DOWN:\n                y += 1;\n                break;\n            case MoveDirection.LEFT:\n                x -= 1;\n                break;\n            case MoveDirection.RIGHT:\n                x += 1;\n                break;\n        }\n        if (x < 9 && x >= 0 && y < 9 && y >= 0) {\n            this.updateCursor(new Coordinates(x, y));\n        }\n    }\n    updateFocusedNumber(value, focusedLevel = 0) {\n        this.focusedNumber = value;\n        this.focusedLevel = focusedLevel;\n        this.redrawHighlight();\n        this.redrawNumbers();\n    }\n    createCanvas(zIndex) {\n        const canvas = document.createElement('canvas');\n        const size = this.config.size;\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n        canvas.style.position = 'absolute';\n        canvas.style.left = '0';\n        canvas.style.top = '0';\n        canvas.style.zIndex = `${zIndex}`;\n        // Scale the canvas properly.\n        const ratio = window.devicePixelRatio;\n        canvas.width = size * ratio;\n        canvas.height = size * ratio;\n        const ctx = getCanvas2DContext(canvas);\n        ctx.scale(ratio, ratio);\n        this.container.appendChild(canvas);\n        return canvas;\n    }\n    redrawHighlight() {\n        clearCanvas(this.neighHighlightCanvas);\n        clearCanvas(this.numberHighlightCanvas);\n        const highlightCell = (ctx, coord, color) => {\n            const x = this.getCanvasPosForIdx(coord.x);\n            const y = this.getCanvasPosForIdx(coord.y);\n            ctx.fillStyle = color;\n            ctx.fillRect(x, y, this.getCellSize(), this.getCellSize());\n        };\n        const highlightDraftCell = (ctx, coord, value, color) => {\n            const boxSize = this.getCellSize() / 3;\n            const x = this.getCanvasPosForIdx(coord.x) +\n                Math.floor((value - 1) % 3) * boxSize;\n            const y = this.getCanvasPosForIdx(coord.y) +\n                Math.floor((value - 1) / 3) * boxSize;\n            ctx.fillStyle = color;\n            ctx.fillRect(x, y, boxSize, boxSize);\n        };\n        const cursor = this.cursorCoord;\n        if (cursor && this.config.highlightCursorNeighbors) {\n            const ctx = getCanvas2DContext(this.neighHighlightCanvas);\n            const cells = this.gameBoard.getCellsByNeighborToCoord(cursor);\n            for (const cell of cells) {\n                highlightCell(ctx, cell.coordinate, this.getTheme().colorHighlightBg1);\n            }\n        }\n        if (this.focusedNumber !== null &&\n            (this.config.highlightNumberNeighbors || this.config.highlightNumber)) {\n            const ctx = getCanvas2DContext(this.numberHighlightCanvas);\n            const numberCells = this.gameBoard.cells.filter((c) => {\n                return c.value === this.focusedNumber;\n            });\n            let cells = numberCells.slice();\n            if (this.config.highlightNumberNeighbors && this.focusedLevel === 1) {\n                const cellArrays = numberCells.map((c) => {\n                    return this.gameBoard.getCellsByNeighborToCoord(c.coordinate);\n                });\n                cells = mergeCellLists(cellArrays);\n            }\n            for (const cell of cells) {\n                highlightCell(ctx, cell.coordinate, this.getTheme().colorHighlightBg2);\n            }\n            // Also highlight all draft values.\n            for (const cell of this.gameBoard.cells) {\n                if (cell.hasDraftNumber(this.focusedNumber)) {\n                    highlightDraftCell(ctx, cell.coordinate, this.focusedNumber, this.getTheme().colorHighlightBg1);\n                }\n            }\n        }\n    }\n    redrawGrid() {\n        const ctx = getCanvas2DContext(this.gridCanvas);\n        if (!ctx) {\n            console.error('Context not available');\n            return;\n        }\n        const startPos = this.getCanvasPosForIdx(0);\n        const endPos = this.getCanvasPosForIdx(9);\n        const style = { color: this.getTheme().colorPrefilled };\n        const sqrBorderStyle = {\n            color: this.getTheme().colorPrefilled,\n            width: 3,\n        };\n        for (let i = 0; i <= 9; i++) {\n            const pos = this.getCanvasPosForIdx(i);\n            drawLine(ctx, startPos, pos, endPos, pos, i % 3 ? style : sqrBorderStyle);\n            drawLine(ctx, pos, startPos, pos, endPos, i % 3 ? style : sqrBorderStyle);\n        }\n    }\n    redrawNumbers() {\n        if (!this.gameBoard) {\n            return;\n        }\n        const ctx = this.numbersCanvas.getContext('2d');\n        if (!ctx) {\n            console.error('Context not available');\n            return;\n        }\n        clearCanvas(this.numbersCanvas);\n        const drawNumber = (val, coord, small, defaultColor) => {\n            const boxSize = this.getCellSize() / (small ? 3 : 1);\n            const fontSize = boxSize * 0.8;\n            let x = this.getCanvasPosForIdx(coord.x) + boxSize / 2;\n            let y = this.getCanvasPosForIdx(coord.y) + boxSize / 2 + fontSize * 0.07;\n            if (small) {\n                x += Math.floor((val - 1) % 3) * boxSize;\n                y += Math.floor((val - 1) / 3) * boxSize;\n            }\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.font = `${fontSize}px monospace`;\n            ctx.fillStyle = defaultColor;\n            if (val === this.focusedNumber) {\n                ctx.fillStyle = this.getTheme().colorHighlightFg;\n            }\n            ctx.fillText(val.toString(), x, y);\n        };\n        for (const cell of this.gameBoard.cells) {\n            if (cell.state === SolvingCellState.PREFILLED) {\n                drawNumber(cell.value, cell.coordinate, false, this.getTheme().colorPrefilled);\n            }\n            if (cell.state === SolvingCellState.SOLVED) {\n                drawNumber(cell.value, cell.coordinate, false, this.getTheme().colorSolved);\n            }\n            if (cell.state === SolvingCellState.SOLVING) {\n                for (let i = 1; i <= 9; ++i) {\n                    if (cell.draftNumbers.has(i)) {\n                        drawNumber(i, cell.coordinate, true, this.getTheme().colorDraft);\n                    }\n                }\n            }\n        }\n    }\n    redrawCursor() {\n        const ctx = getCanvas2DContext(this.cursorCanvas);\n        // Clear the current drawing at first.\n        clearCanvas(this.cursorCanvas);\n        const coord = this.cursorCoord;\n        if (coord === null)\n            return;\n        // Redraw cursor box.\n        const x1 = this.getCanvasPosForIdx(coord.x);\n        const x2 = this.getCanvasPosForIdx(coord.x + 1);\n        const y1 = this.getCanvasPosForIdx(coord.y);\n        const y2 = this.getCanvasPosForIdx(coord.y + 1);\n        const style = {\n            color: this.getTheme().colorHighlightFg,\n            width: 3,\n        };\n        drawLine(ctx, x1, y1, x2, y1, style);\n        drawLine(ctx, x1, y2, x2, y2, style);\n        drawLine(ctx, x1, y1, x1, y2, style);\n        drawLine(ctx, x2, y1, x2, y2, style);\n    }\n}\n//# sourceMappingURL=board_ui.js.map","import {Cell, Coordinates, mergeCellLists, SolvingCellState} from './types.js';\nimport {SolvingBoard} from './solve.js';\nimport * as theme from './theme.js';\n\ninterface LineStyle {\n  color: string;\n  width?: number;\n}\n\nfunction drawLine(\n  ctx: CanvasRenderingContext2D,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  style: LineStyle,\n): void {\n  ctx.strokeStyle = style.color;\n  ctx.lineWidth = style.width ? style.width : 1;\n  // Square is better for drawing border of the grid.\n  ctx.lineCap = 'square';\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n}\n\nfunction getCanvas2DContext(\n  canvas: HTMLCanvasElement,\n): CanvasRenderingContext2D {\n  return canvas.getContext('2d')!;\n}\n\nfunction clearCanvas(canvas: HTMLCanvasElement) {\n  const ctx = getCanvas2DContext(canvas);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nexport enum MoveDirection {\n  UP,\n  DOWN,\n  RIGHT,\n  LEFT,\n}\n\nconst CANVAS_MARGIN = 5;\n\nexport interface Config {\n  // Size of the canvas.\n  size: number;\n\n  // Highlight the neighbors of the focused cell.\n  highlightCursorNeighbors: boolean;\n\n  // Highlight the cells containing the focused number.\n  highlightNumber: boolean;\n\n  // Highlight the all neighbors of the focused number.\n  highlightNumberNeighbors: boolean;\n}\n\nconst VIRTUAL_KB_HTML = `\n<div id=\"draft-mode-line\">\n  <label class=\"switch\">\n    <input type=\"checkbox\" id=\"kb-draft-mode-switch\" checked=\"true\">\n    <span class=\"slider\"></span>\n  </label>\n  <span>Draft mode</span>\n</div>\n<div div class=\"keyboard\" id=\"keyboard\"></div>\n`;\n\ntype KeyInputCallback = (value: number, draftMode: boolean) => void;\n\nconst VIRTUAL_KEYBOARD_ID = 'num-keyboard';\n\n// Shows a keyboard for inputting digits for the Sudoku game.\nclass VirtualKeyboard {\n  private readonly cb: KeyInputCallback;\n  private readonly container: HTMLElement;\n\n  private width: number;\n  private height: number;\n\n  constructor(parent: HTMLElement, keyInputCallback: KeyInputCallback) {\n    this.container = document.createElement('div');\n    this.container.id = VIRTUAL_KEYBOARD_ID;\n    parent.appendChild(this.container);\n    this.container.setHTMLUnsafe(VIRTUAL_KB_HTML);\n    this.container.classList.add('fading-fast');\n    this.cb = keyInputCallback;\n\n    const keyboard = document.getElementById('keyboard')!;\n    const keyboardDraftModeSwitch = document.getElementById(\n      'kb-draft-mode-switch',\n    ) as HTMLInputElement;\n    for (let i = 1; i <= 9; i++) {\n      const key = document.createElement('div');\n      key.classList.add('key');\n      key.classList.add('btn-default');\n      key.textContent = `${i}`;\n      key.dataset['value'] = `${i}`;\n      key.addEventListener('click', ev => {\n        ev.preventDefault();\n        ev.stopPropagation();\n        if (key.classList.contains('disabled')) return;\n        this.cb(i, keyboardDraftModeSwitch.checked);\n      });\n      keyboard.appendChild(key);\n    }\n\n    // Scope the click events.\n    this.container.addEventListener('click', ev => {\n      ev.stopPropagation();\n    });\n\n    // This needs to be called before hide(), otherwise they will be all 0s.\n    this.width = this.container.clientWidth;\n    this.height = this.container.clientHeight;\n\n    this.hide();\n  }\n\n  show(boardUi: BoardUi, coord: Coordinates) {\n    // Calculate the location.\n    const w = this.width;\n    const h = this.height;\n\n    const x1 = boardUi.getCanvasPosForIdx(coord.x);\n    const x2 = boardUi.getCanvasPosForIdx(coord.x + 1);\n    const y1 = boardUi.getCanvasPosForIdx(coord.y);\n    const y2 = boardUi.getCanvasPosForIdx(coord.y + 1);\n\n    const MARGIN = 8;\n\n    const x = x1 - w - MARGIN > 0 ? x1 - w - MARGIN : x2 + MARGIN / 2;\n    const y = y2 + h < boardUi.config.size ? y2 + MARGIN / 2 : y1 - MARGIN - h;\n\n    this.container.style.left = `${x}px`;\n    this.container.style.top = `${y}px`;\n\n    this.refreshNumbers(boardUi, coord);\n\n    // Show it.\n    const c = this.container;\n    c.classList.remove('hidden');\n    console.debug('display virtual keyboard at (%d, %d)', x, y);\n  }\n\n  refreshNumbers(boardUi: BoardUi, coord: Coordinates) {\n    // Hide unavailable numbers.\n    const draftNumbers = boardUi.gameBoard.getCellByCoord(coord).draftNumbers;\n    const availableNumbers =\n      boardUi.gameBoard.getAvailableNumbersForCell(coord);\n    const keyboard = document.getElementById('keyboard')!;\n    keyboard.childNodes.forEach(node => {\n      const dom = node as HTMLElement;\n      const value = parseInt(dom.dataset['value']!);\n      if (availableNumbers.has(value)) {\n        dom.classList.add('enabled');\n        dom.classList.remove('disabled');\n      } else {\n        dom.classList.add('disabled');\n        dom.classList.remove('enabled');\n      }\n      if (draftNumbers.has(value)) {\n        dom.classList.add('highlight');\n      } else {\n        dom.classList.remove('highlight');\n      }\n    });\n  }\n\n  hide() {\n    console.debug('hide virtual keyboard');\n    this.container.classList.add('hidden');\n  }\n}\n\nexport class BoardUi {\n  config!: Config;\n  private readonly container: HTMLElement;\n\n  gameBoard: SolvingBoard;\n\n  private readonly virtualKeyboard: VirtualKeyboard;\n\n  private gridCanvas!: HTMLCanvasElement;\n  private neighHighlightCanvas!: HTMLCanvasElement;\n  private numberHighlightCanvas!: HTMLCanvasElement;\n  // The canvas layer for displaying numbers.\n  private numbersCanvas!: HTMLCanvasElement;\n  // The canvas layer for displaying cursor.\n  private cursorCanvas!: HTMLCanvasElement;\n  // The canvas layer for handling mouse event.\n  private clickCanvas!: HTMLCanvasElement;\n\n  cursorCoord: Coordinates | null = null;\n\n  focusedNumber: number | null = null;\n  focusedLevel = 0;\n\n  constructor(\n    container: HTMLElement,\n    gameBoard: SolvingBoard,\n    digitInputCallback: KeyInputCallback,\n    config: Config,\n  ) {\n    this.container = container;\n    this.gameBoard = gameBoard;\n    this.virtualKeyboard = new VirtualKeyboard(this.container, (v, b) => {\n      // Do not hide in draft mode.\n      if (!b) {\n        this.virtualKeyboard.hide();\n      }\n      digitInputCallback(v, b);\n      if (this.cursorCoord) {\n        this.virtualKeyboard.refreshNumbers(this, this.cursorCoord);\n      }\n    });\n    this.updateConfig(config);\n    container.style.height = `${container.clientWidth}px`;\n  }\n\n  private getTheme(): theme.Theme {\n    return theme.getCurrentTheme();\n  }\n\n  private getCellSize(): number {\n    return (this.config.size - CANVAS_MARGIN * 2) / 9;\n  }\n\n  getCanvasPosForIdx(index: number): number {\n    return CANVAS_MARGIN + this.getCellSize() * index;\n  }\n\n  private getIdxForCanvasPos(pos: number): number | null {\n    for (let i = 0; i < 9; ++i) {\n      if (\n        pos < this.getCanvasPosForIdx(i + 1) &&\n        pos > this.getCanvasPosForIdx(i)\n      ) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  updateBoard(board: SolvingBoard | null = null): void {\n    if (board !== null) {\n      this.gameBoard = board;\n    }\n    this.redrawNumbers();\n    this.redrawHighlight();\n  }\n\n  updateConfig(config: Config): void {\n    this.config = config;\n\n    // Remove all canvas children at first.\n    Array.from(this.container.children).forEach(child => {\n      if (!(child instanceof HTMLCanvasElement)) {\n        return;\n      }\n      this.container.removeChild(child);\n    });\n\n    this.numberHighlightCanvas = this.createCanvas(1);\n    this.neighHighlightCanvas = this.createCanvas(2);\n    this.gridCanvas = this.createCanvas(3);\n    this.numbersCanvas = this.createCanvas(4);\n    this.cursorCanvas = this.createCanvas(5);\n    this.clickCanvas = this.createCanvas(6);\n\n    this.redrawGrid();\n    this.redrawNumbers();\n    this.clickCanvas.addEventListener('click', (ev: MouseEvent) => {\n      ev.preventDefault();\n      ev.stopPropagation();\n      this.virtualKeyboard.hide();\n      const rect = this.clickCanvas.getBoundingClientRect();\n      const x = this.getIdxForCanvasPos(ev.clientX - rect.left);\n      const y = this.getIdxForCanvasPos(ev.clientY - rect.top);\n      // Reset cursor if the click is out of bound.\n      if (x === null || y === null) {\n        this.updateCursor(null);\n      } else {\n        const coord = new Coordinates(x, y);\n        this.updateCursor(coord);\n\n        // If the cell is empty, show keyboard.\n        const cell = this.gameBoard.getCellByCoord(coord);\n        if (cell.value === null) {\n          this.virtualKeyboard.show(this, coord);\n        } else {\n          this.updateFocusedNumber(cell.value, 0);\n        }\n      }\n    });\n    this.clickCanvas.addEventListener('dblclick', (ev: MouseEvent) => {\n      ev.preventDefault();\n      ev.stopPropagation();\n      const rect = this.clickCanvas.getBoundingClientRect();\n      const x = this.getIdxForCanvasPos(ev.clientX - rect.left);\n      const y = this.getIdxForCanvasPos(ev.clientY - rect.top);\n      // Reset cursor if the click is out of bound.\n      if (x === null || y === null) {\n        this.updateFocusedNumber(null);\n      } else {\n        const cell = this.gameBoard.getCellByCoord(new Coordinates(x, y));\n        // Allow double click to cancel selection.\n        this.updateFocusedNumber(\n          cell.value === this.focusedNumber && this.focusedLevel === 1\n            ? null\n            : cell.value,\n          1,\n        );\n      }\n    });\n  }\n\n  updateCursor(coord: Coordinates | null): void {\n    console.debug('Set cursor to %s', coord);\n\n    if (coord === null) {\n      this.virtualKeyboard.hide();\n    }\n\n    // TODO: If the pos did not change, we can skip the following logic.\n    this.cursorCoord = coord;\n    this.redrawCursor();\n    this.redrawHighlight();\n  }\n\n  moveCursor(d: MoveDirection) {\n    if (!this.cursorCoord) return;\n    this.virtualKeyboard.hide();\n    let x = this.cursorCoord.x;\n    let y = this.cursorCoord.y;\n    switch (d) {\n      case MoveDirection.UP:\n        y -= 1;\n        break;\n      case MoveDirection.DOWN:\n        y += 1;\n        break;\n      case MoveDirection.LEFT:\n        x -= 1;\n        break;\n      case MoveDirection.RIGHT:\n        x += 1;\n        break;\n    }\n    if (x < 9 && x >= 0 && y < 9 && y >= 0) {\n      this.updateCursor(new Coordinates(x, y));\n    }\n  }\n\n  updateFocusedNumber(value: number | null, focusedLevel = 0) {\n    this.focusedNumber = value;\n    this.focusedLevel = focusedLevel;\n    this.redrawHighlight();\n    this.redrawNumbers();\n  }\n\n  private createCanvas(zIndex: number): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n    const size = this.config.size;\n    canvas.style.width = `${size}px`;\n    canvas.style.height = `${size}px`;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    canvas.style.top = '0';\n    canvas.style.zIndex = `${zIndex}`;\n\n    // Scale the canvas properly.\n    const ratio = window.devicePixelRatio;\n    canvas.width = size * ratio;\n    canvas.height = size * ratio;\n    const ctx = getCanvas2DContext(canvas);\n    ctx.scale(ratio, ratio);\n\n    this.container.appendChild(canvas);\n    return canvas;\n  }\n\n  private redrawHighlight(): void {\n    clearCanvas(this.neighHighlightCanvas);\n    clearCanvas(this.numberHighlightCanvas);\n\n    const highlightCell = (\n      ctx: CanvasRenderingContext2D,\n      coord: Coordinates,\n      color: string,\n    ) => {\n      const x = this.getCanvasPosForIdx(coord.x);\n      const y = this.getCanvasPosForIdx(coord.y);\n      ctx.fillStyle = color;\n      ctx.fillRect(x, y, this.getCellSize(), this.getCellSize());\n    };\n\n    const highlightDraftCell = (\n      ctx: CanvasRenderingContext2D,\n      coord: Coordinates,\n      value: number,\n      color: string,\n    ) => {\n      const boxSize = this.getCellSize() / 3;\n      const x =\n        this.getCanvasPosForIdx(coord.x) +\n        Math.floor((value - 1) % 3) * boxSize;\n      const y =\n        this.getCanvasPosForIdx(coord.y) +\n        Math.floor((value - 1) / 3) * boxSize;\n      ctx.fillStyle = color;\n      ctx.fillRect(x, y, boxSize, boxSize);\n    };\n\n    const cursor = this.cursorCoord;\n    if (cursor && this.config.highlightCursorNeighbors) {\n      const ctx = getCanvas2DContext(this.neighHighlightCanvas);\n      const cells = this.gameBoard.getCellsByNeighborToCoord(cursor);\n      for (const cell of cells) {\n        highlightCell(ctx, cell.coordinate, this.getTheme().colorHighlightBg1);\n      }\n    }\n\n    if (\n      this.focusedNumber !== null &&\n      (this.config.highlightNumberNeighbors || this.config.highlightNumber)\n    ) {\n      const ctx = getCanvas2DContext(this.numberHighlightCanvas);\n      const numberCells = this.gameBoard.cells.filter((c: Cell) => {\n        return c.value === this.focusedNumber;\n      });\n      let cells: ReadonlyArray<Cell> = numberCells.slice();\n      if (this.config.highlightNumberNeighbors && this.focusedLevel === 1) {\n        const cellArrays = numberCells.map((c: Cell) => {\n          return this.gameBoard.getCellsByNeighborToCoord(c.coordinate);\n        });\n        cells = mergeCellLists(cellArrays);\n      }\n      for (const cell of cells) {\n        highlightCell(ctx, cell.coordinate, this.getTheme().colorHighlightBg2);\n      }\n\n      // Also highlight all draft values.\n      for (const cell of this.gameBoard.cells) {\n        if (cell.hasDraftNumber(this.focusedNumber)) {\n          highlightDraftCell(\n            ctx,\n            cell.coordinate,\n            this.focusedNumber,\n            this.getTheme().colorHighlightBg1,\n          );\n        }\n      }\n    }\n  }\n\n  private redrawGrid(): void {\n    const ctx = getCanvas2DContext(this.gridCanvas);\n    if (!ctx) {\n      console.error('Context not available');\n      return;\n    }\n\n    const startPos = this.getCanvasPosForIdx(0);\n    const endPos = this.getCanvasPosForIdx(9);\n    const style: LineStyle = {color: this.getTheme().colorPrefilled};\n    const sqrBorderStyle: LineStyle = {\n      color: this.getTheme().colorPrefilled,\n      width: 3,\n    };\n    for (let i = 0; i <= 9; i++) {\n      const pos = this.getCanvasPosForIdx(i);\n      drawLine(ctx, startPos, pos, endPos, pos, i % 3 ? style : sqrBorderStyle);\n      drawLine(ctx, pos, startPos, pos, endPos, i % 3 ? style : sqrBorderStyle);\n    }\n  }\n\n  private redrawNumbers(): void {\n    if (!this.gameBoard) {\n      return;\n    }\n\n    const ctx = this.numbersCanvas.getContext('2d');\n    if (!ctx) {\n      console.error('Context not available');\n      return;\n    }\n\n    clearCanvas(this.numbersCanvas);\n\n    const drawNumber = (\n      val: number,\n      coord: Coordinates,\n      small: boolean,\n      defaultColor: string,\n    ) => {\n      const boxSize = this.getCellSize() / (small ? 3 : 1);\n      const fontSize = boxSize * 0.8;\n      let x = this.getCanvasPosForIdx(coord.x) + boxSize / 2;\n      let y = this.getCanvasPosForIdx(coord.y) + boxSize / 2 + fontSize * 0.07;\n      if (small) {\n        x += Math.floor((val - 1) % 3) * boxSize;\n        y += Math.floor((val - 1) / 3) * boxSize;\n      }\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = `${fontSize}px monospace`;\n      ctx.fillStyle = defaultColor;\n      if (val === this.focusedNumber) {\n        ctx.fillStyle = this.getTheme().colorHighlightFg;\n      }\n      ctx.fillText(val.toString(), x, y);\n    };\n\n    for (const cell of this.gameBoard.cells) {\n      if (cell.state === SolvingCellState.PREFILLED) {\n        drawNumber(\n          cell.value!,\n          cell.coordinate,\n          false,\n          this.getTheme().colorPrefilled,\n        );\n      }\n      if (cell.state === SolvingCellState.SOLVED) {\n        drawNumber(\n          cell.value!,\n          cell.coordinate,\n          false,\n          this.getTheme().colorSolved,\n        );\n      }\n      if (cell.state === SolvingCellState.SOLVING) {\n        for (let i = 1; i <= 9; ++i) {\n          if (cell.draftNumbers.has(i)) {\n            drawNumber(i, cell.coordinate, true, this.getTheme().colorDraft);\n          }\n        }\n      }\n    }\n  }\n\n  private redrawCursor(): void {\n    const ctx = getCanvas2DContext(this.cursorCanvas);\n\n    // Clear the current drawing at first.\n    clearCanvas(this.cursorCanvas);\n\n    const coord = this.cursorCoord;\n\n    if (coord === null) return;\n\n    // Redraw cursor box.\n    const x1 = this.getCanvasPosForIdx(coord.x);\n    const x2 = this.getCanvasPosForIdx(coord.x + 1);\n    const y1 = this.getCanvasPosForIdx(coord.y);\n    const y2 = this.getCanvasPosForIdx(coord.y + 1);\n    const style: LineStyle = {\n      color: this.getTheme().colorHighlightFg,\n      width: 3,\n    };\n    drawLine(ctx, x1, y1, x2, y1, style);\n    drawLine(ctx, x1, y2, x2, y2, style);\n    drawLine(ctx, x1, y1, x1, y2, style);\n    drawLine(ctx, x2, y1, x2, y2, style);\n  }\n}\n","import { eliminatePossibleStates, SolvingBoard } from './solve.js';\n// Game contains the logic related to one round of game. It's supposed to be independent of UI.\nexport class Game {\n    answerBoard;\n    puzzleBoard;\n    // Game start time and end time.\n    startTime;\n    endTime = null;\n    // Saved state.\n    savedPuzzleBoard = null;\n    // Number of the wrong input.\n    mistakes = 0;\n    constructor(answer, puzzle) {\n        this.answerBoard = answer;\n        this.puzzleBoard = SolvingBoard.createFromBoard(puzzle);\n        this.startTime = performance.now();\n    }\n    // Fills in `value` at `coord`.\n    fillInNumber(coord, value) {\n        const cell = this.puzzleBoard.cells[coord.linearIndex];\n        if (cell.hasNumber()) {\n            console.debug('%s already have number', coord);\n            return;\n        }\n        // TODO: This part should be able to be controlled by rules.\n        if (this.answerBoard.cells[coord.linearIndex].value !== value) {\n            alert('Not correct :)');\n            this.mistakes++;\n            return;\n        }\n        cell.fillNumber(value);\n        // Remove all draft numbers which are no longer possible after this action.\n        const actions = eliminatePossibleStates(this.puzzleBoard);\n        this.puzzleBoard.takeActions(actions);\n        // All values have been filled.\n        if (this.isAllCorrect()) {\n            this.endTime = performance.now();\n            alert('Congratulations!!!');\n        }\n    }\n    toggleDraftNumber(coord, value) {\n        const cell = this.puzzleBoard.cells[coord.linearIndex];\n        if (cell.hasNumber()) {\n            console.debug('%s already have number', coord);\n            return;\n        }\n        if (cell.hasDraftNumber(value)) {\n            cell.removeDraftNumber(value);\n        }\n        else {\n            cell.addDraftNumber(value);\n        }\n    }\n    recalculateDraftNumbers() {\n        for (const cell of this.puzzleBoard.cells) {\n            if (!cell.hasNumber()) {\n                cell.addAllDraftNumber();\n            }\n        }\n        const actions = eliminatePossibleStates(this.puzzleBoard);\n        this.puzzleBoard.takeActions(actions);\n    }\n    getEmptyCellsCount() {\n        let cnt = 0;\n        for (const cell of this.puzzleBoard.cells) {\n            if (!cell.hasNumber()) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n    getElapsedSeconds() {\n        let end = performance.now();\n        if (this.endTime !== null) {\n            end = this.endTime;\n        }\n        return Math.round((end - this.startTime) / 1000);\n    }\n    isAllCorrect() {\n        for (let i = 0; i < 81; ++i) {\n            if (this.puzzleBoard.cells[i].value !== this.answerBoard.cells[i].value) {\n                return false;\n            }\n        }\n        return true;\n    }\n    saveState() {\n        this.savedPuzzleBoard = this.puzzleBoard.clone();\n    }\n    loadState() {\n        if (this.savedPuzzleBoard === null) {\n            console.error('No saved data');\n            return;\n        }\n        this.puzzleBoard = this.savedPuzzleBoard;\n        this.savedPuzzleBoard = null;\n    }\n}\n//# sourceMappingURL=game.js.map","import {Board, Coordinates} from './types.js';\nimport {eliminatePossibleStates, SolvingBoard} from './solve.js';\n\n// Game contains the logic related to one round of game. It's supposed to be independent of UI.\nexport class Game {\n  answerBoard: Board;\n  puzzleBoard: SolvingBoard;\n\n  // Game start time and end time.\n  readonly startTime: DOMHighResTimeStamp;\n  endTime: DOMHighResTimeStamp | null = null;\n\n  // Saved state.\n  savedPuzzleBoard: SolvingBoard | null = null;\n\n  // Number of the wrong input.\n  mistakes = 0;\n\n  constructor(answer: Board, puzzle: Board) {\n    this.answerBoard = answer;\n    this.puzzleBoard = SolvingBoard.createFromBoard(puzzle);\n    this.startTime = performance.now();\n  }\n\n  // Fills in `value` at `coord`.\n  fillInNumber(coord: Coordinates, value: number) {\n    const cell = this.puzzleBoard.cells[coord.linearIndex];\n    if (cell.hasNumber()) {\n      console.debug('%s already have number', coord);\n      return;\n    }\n\n    // TODO: This part should be able to be controlled by rules.\n    if (this.answerBoard.cells[coord.linearIndex].value !== value) {\n      alert('Not correct :)');\n      this.mistakes++;\n      return;\n    }\n\n    cell.fillNumber(value);\n\n    // Remove all draft numbers which are no longer possible after this action.\n    const actions = eliminatePossibleStates(this.puzzleBoard);\n    this.puzzleBoard.takeActions(actions);\n\n    // All values have been filled.\n    if (this.isAllCorrect()) {\n      this.endTime = performance.now();\n      alert('Congratulations!!!');\n    }\n  }\n\n  toggleDraftNumber(coord: Coordinates, value: number) {\n    const cell = this.puzzleBoard.cells[coord.linearIndex];\n    if (cell.hasNumber()) {\n      console.debug('%s already have number', coord);\n      return;\n    }\n\n    if (cell.hasDraftNumber(value)) {\n      cell.removeDraftNumber(value);\n    } else {\n      cell.addDraftNumber(value);\n    }\n  }\n\n  recalculateDraftNumbers() {\n    for (const cell of this.puzzleBoard.cells) {\n      if (!cell.hasNumber()) {\n        cell.addAllDraftNumber();\n      }\n    }\n    const actions = eliminatePossibleStates(this.puzzleBoard);\n    this.puzzleBoard.takeActions(actions);\n  }\n\n  getEmptyCellsCount(): number {\n    let cnt = 0;\n    for (const cell of this.puzzleBoard.cells) {\n      if (!cell.hasNumber()) {\n        cnt++;\n      }\n    }\n    return cnt;\n  }\n\n  getElapsedSeconds(): number {\n    let end = performance.now();\n    if (this.endTime !== null) {\n      end = this.endTime;\n    }\n    return Math.round((end - this.startTime) / 1000);\n  }\n\n  private isAllCorrect(): boolean {\n    for (let i = 0; i < 81; ++i) {\n      if (this.puzzleBoard.cells[i].value !== this.answerBoard.cells[i].value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  saveState() {\n    this.savedPuzzleBoard = this.puzzleBoard.clone();\n  }\n\n  loadState() {\n    if (this.savedPuzzleBoard === null) {\n      console.error('No saved data');\n      return;\n    }\n    this.puzzleBoard = this.savedPuzzleBoard;\n    this.savedPuzzleBoard = null;\n  }\n}\n","import * as types from './types.js';\nimport { SolvingCell, CELLS_NUMBER, SolvingCellState } from './types.js';\nexport class SolvingBoard extends types.GenericBoard {\n    static createFromBoard(board) {\n        const cells = new Array();\n        for (const cell of board.cells) {\n            if (cell.value === null) {\n                cells.push(SolvingCell.newSolving(cell.coordinate));\n            }\n            else {\n                cells.push(SolvingCell.newPrefilled(cell.coordinate, cell.value));\n            }\n        }\n        return new SolvingBoard(cells);\n    }\n    clone() {\n        return new SolvingBoard(this.cells.map(c => c.clone()));\n    }\n    getEmptyCellsCount() {\n        return this.cells.filter(cell => cell.state === SolvingCellState.SOLVING)\n            .length;\n    }\n    getAvailableNumbersForCell(coord) {\n        const cell = this.cells[coord.linearIndex];\n        if (cell.hasNumber()) {\n            return new Set();\n        }\n        const neighColors = new Set();\n        this.getCellsByNeighborToCoord(coord).forEach(x => {\n            if (x.value) {\n                neighColors.add(x.value);\n            }\n        });\n        const ret = new Set();\n        for (let i = 1; i <= 9; ++i) {\n            if (!neighColors.has(i)) {\n                ret.add(i);\n            }\n        }\n        return ret;\n    }\n    takeAction(action) {\n        console.debug(actionToString(action));\n        const cell = this.getCellByCoord(action.coordinate);\n        switch (action.type) {\n            case ActionType.REMOVE_DRAFT_NUMBER:\n                cell.removeDraftNumber(action.value);\n                break;\n            case ActionType.FILL_IN_NUMBER:\n                cell.fillNumber(action.value);\n                break;\n        }\n    }\n    takeActions(actions) {\n        for (const action of actions) {\n            this.takeAction(action);\n        }\n    }\n}\nvar ActionType;\n(function (ActionType) {\n    ActionType[\"REMOVE_DRAFT_NUMBER\"] = \"remove draft number\";\n    ActionType[\"FILL_IN_NUMBER\"] = \"fill in number\";\n})(ActionType || (ActionType = {}));\nfunction actionToString(a) {\n    return `${a.coordinate.toString()}: ${a.type} value ${a.value}, reason: ${a.reasonString}`;\n}\nexport function eliminatePossibleStates(board) {\n    const ret = new Array();\n    const addAction = function (targetCell, value, sourceCell) {\n        if (targetCell.state === SolvingCellState.SOLVING &&\n            targetCell.draftNumbers.has(value)) {\n            ret.push({\n                coordinate: targetCell.coordinate,\n                type: ActionType.REMOVE_DRAFT_NUMBER,\n                value: value,\n                reasonString: `Conflict with ${sourceCell.toString()}`,\n            });\n        }\n    };\n    for (let i = 0; i < CELLS_NUMBER; i++) {\n        const coord = types.Coordinates.fromLinearIndex(i);\n        const cell = board.cells[i];\n        if (cell.state === SolvingCellState.SOLVING) {\n            continue;\n        }\n        if (cell.value === null) {\n            throw new Error('Invalid state');\n        }\n        const valueToRemove = cell.value;\n        for (const targetCell of board.getCellsByColumn(coord.x)) {\n            addAction(targetCell, valueToRemove, cell);\n        }\n        for (const targetCell of board.getCellsByRow(coord.y)) {\n            addAction(targetCell, valueToRemove, cell);\n        }\n        for (const targetCell of board.getCellsBySquare(coord.squareIndex)) {\n            addAction(targetCell, valueToRemove, cell);\n        }\n    }\n    return ret;\n}\nfunction uniqueValueSetter(board) {\n    const ret = new Array();\n    const addAction = function (cell, value) {\n        ret.push({\n            coordinate: cell.coordinate,\n            type: ActionType.FILL_IN_NUMBER,\n            value: value,\n            reasonString: null,\n        });\n    };\n    for (let i = 0; i < CELLS_NUMBER; i++) {\n        const cell = board.cells[i];\n        if (cell.state !== SolvingCellState.SOLVING) {\n            continue;\n        }\n        const value = cell.draftNumbers.getUnique();\n        if (value !== null) {\n            addAction(cell, value);\n        }\n    }\n    return ret;\n}\nexport function solve(board) {\n    const solvingBoard = SolvingBoard.createFromBoard(board);\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const solvers = [\n            { solve: eliminatePossibleStates },\n            { solve: uniqueValueSetter },\n        ];\n        const before = solvingBoard.getEmptyCellsCount();\n        for (const solver of solvers) {\n            const actions = solver.solve(solvingBoard);\n            console.debug(actions.length);\n            solvingBoard.takeActions(actions);\n        }\n        const after = solvingBoard.getEmptyCellsCount();\n        console.debug(solvingBoard.printBoard());\n        if (before === after) {\n            break;\n        }\n    }\n}\n//# sourceMappingURL=solve.js.map","import * as types from './types.js';\n\nimport {SolvingCell, CELLS_NUMBER, SolvingCellState} from './types.js';\n\nexport class SolvingBoard extends types.GenericBoard<SolvingCell> {\n  static createFromBoard(board: Readonly<types.Board>): SolvingBoard {\n    const cells = new Array<SolvingCell>();\n    for (const cell of board.cells) {\n      if (cell.value === null) {\n        cells.push(SolvingCell.newSolving(cell.coordinate));\n      } else {\n        cells.push(SolvingCell.newPrefilled(cell.coordinate, cell.value));\n      }\n    }\n    return new SolvingBoard(cells);\n  }\n\n  clone(): SolvingBoard {\n    return new SolvingBoard(this.cells.map(c => c.clone()));\n  }\n\n  getEmptyCellsCount(): number {\n    return this.cells.filter(cell => cell.state === SolvingCellState.SOLVING)\n      .length;\n  }\n\n  getAvailableNumbersForCell(coord: types.Coordinates): ReadonlySet<number> {\n    const cell = this.cells[coord.linearIndex];\n    if (cell.hasNumber()) {\n      return new Set();\n    }\n\n    const neighColors = new Set<number>();\n    this.getCellsByNeighborToCoord(coord).forEach(x => {\n      if (x.value) {\n        neighColors.add(x.value);\n      }\n    });\n    const ret = new Set<number>();\n    for (let i = 1; i <= 9; ++i) {\n      if (!neighColors.has(i)) {\n        ret.add(i);\n      }\n    }\n    return ret;\n  }\n\n  takeAction(action: Action) {\n    console.debug(actionToString(action));\n    const cell = this.getCellByCoord(action.coordinate);\n    switch (action.type) {\n      case ActionType.REMOVE_DRAFT_NUMBER:\n        cell.removeDraftNumber(action.value);\n        break;\n      case ActionType.FILL_IN_NUMBER:\n        cell.fillNumber(action.value);\n        break;\n    }\n  }\n\n  takeActions(actions: Array<Action>) {\n    for (const action of actions) {\n      this.takeAction(action);\n    }\n  }\n}\n\nenum ActionType {\n  REMOVE_DRAFT_NUMBER = 'remove draft number',\n  FILL_IN_NUMBER = 'fill in number',\n}\n\ninterface Action {\n  readonly coordinate: types.Coordinates;\n  readonly type: ActionType;\n  readonly value: number;\n  readonly reasonString: string | null;\n}\n\nfunction actionToString(a: Action): string {\n  return `${a.coordinate.toString()}: ${a.type} value ${a.value}, reason: ${a.reasonString}`;\n}\n\ninterface PartialSolver {\n  solve(board: SolvingBoard): Array<Action>;\n}\n\nexport function eliminatePossibleStates(board: SolvingBoard): Array<Action> {\n  const ret = new Array<Action>();\n  const addAction = function (\n    targetCell: SolvingCell,\n    value: number,\n    sourceCell: SolvingCell,\n  ) {\n    if (\n      targetCell.state === SolvingCellState.SOLVING &&\n      targetCell.draftNumbers.has(value)\n    ) {\n      ret.push({\n        coordinate: targetCell.coordinate,\n        type: ActionType.REMOVE_DRAFT_NUMBER,\n        value: value,\n        reasonString: `Conflict with ${sourceCell.toString()}`,\n      });\n    }\n  };\n  for (let i = 0; i < CELLS_NUMBER; i++) {\n    const coord = types.Coordinates.fromLinearIndex(i);\n    const cell = board.cells[i];\n    if (cell.state === SolvingCellState.SOLVING) {\n      continue;\n    }\n    if (cell.value === null) {\n      throw new Error('Invalid state');\n    }\n    const valueToRemove = cell.value;\n    for (const targetCell of board.getCellsByColumn(coord.x)) {\n      addAction(targetCell, valueToRemove, cell);\n    }\n    for (const targetCell of board.getCellsByRow(coord.y)) {\n      addAction(targetCell, valueToRemove, cell);\n    }\n    for (const targetCell of board.getCellsBySquare(coord.squareIndex)) {\n      addAction(targetCell, valueToRemove, cell);\n    }\n  }\n  return ret;\n}\n\nfunction uniqueValueSetter(board: SolvingBoard): Array<Action> {\n  const ret = new Array<Action>();\n  const addAction = function (cell: SolvingCell, value: number) {\n    ret.push({\n      coordinate: cell.coordinate,\n      type: ActionType.FILL_IN_NUMBER,\n      value: value,\n      reasonString: null,\n    });\n  };\n\n  for (let i = 0; i < CELLS_NUMBER; i++) {\n    const cell = board.cells[i];\n    if (cell.state !== SolvingCellState.SOLVING) {\n      continue;\n    }\n    const value = cell.draftNumbers.getUnique();\n    if (value !== null) {\n      addAction(cell, value);\n    }\n  }\n\n  return ret;\n}\n\nexport function solve(board: types.Board) {\n  const solvingBoard = SolvingBoard.createFromBoard(board);\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const solvers: Array<PartialSolver> = [\n      {solve: eliminatePossibleStates},\n      {solve: uniqueValueSetter},\n    ];\n\n    const before = solvingBoard.getEmptyCellsCount();\n    for (const solver of solvers) {\n      const actions = solver.solve(solvingBoard);\n      console.debug(actions.length);\n      solvingBoard.takeActions(actions);\n    }\n    const after = solvingBoard.getEmptyCellsCount();\n\n    console.debug(solvingBoard.printBoard());\n    if (before === after) {\n      break;\n    }\n  }\n}\n"],"names":["$fb6cc04260f9a749$var$wasm","SolvingCellState","MoveDirection","ActionType","$c02655ebd8daba6d$export$50932e179583d398","$264de1acac9b7e95$export$cc1a246adca07dd4","$7855482cf5bb294a$var$ActionType","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","$fb6cc04260f9a749$var$addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_2","set","$fb6cc04260f9a749$var$handleError","f","args","apply","e","__wbindgen_exn_store","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$fb6cc04260f9a749$var$cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","$fb6cc04260f9a749$var$cachedUint8ArrayMemory0","$fb6cc04260f9a749$var$getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","$fb6cc04260f9a749$var$getStringFromWasm0","ptr","len","subarray","$fb6cc04260f9a749$var$WASM_VECTOR_LEN","$fb6cc04260f9a749$var$cachedTextEncoder","TextEncoder","encode","$fb6cc04260f9a749$var$encodeString","encodeInto","arg","view","buf","read","written","$fb6cc04260f9a749$var$cachedDataViewMemory0","$fb6cc04260f9a749$var$getDataViewMemory0","detached","undefined","DataView","$fb6cc04260f9a749$var$passArray8ToWasm0","malloc","$fb6cc04260f9a749$var$__wbg_load","module1","imports","Response","WebAssembly","instantiateStreaming","headers","console","warn","bytes","arrayBuffer","instantiate","instance","Instance","$9098339d50778e43$exports","$fb6cc04260f9a749$var$__wbg_init","module_or_path","getPrototypeOf","prototype","$fb6cc04260f9a749$var$__wbg_get_imports","wbg","__wbg_buffer_61b7ce01341d7f88","arg0","__wbg_call_500db948e69c7330","arg1","arg2","arguments","__wbg_call_b0d8e36992d9900d","__wbg_crypto_ed58b8e10a292839","crypto","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","error","__wbindgen_free","__wbg_getRandomValues_bcb4912f16000dc4","getRandomValues","__wbg_msCrypto_0a36e2ec3a343d26","msCrypto","__wbg_new_3ff5b33b1ce712df","__wbg_new_8a6f238a6ece86ea","__wbg_newnoargs_fd9e4bf8be2bc16d","Function","__wbg_newwithbyteoffsetandlength_ba35896968751d91","__wbg_newwithlength_34ce8f1051e74449","__wbg_node_02999533c4ea02e3","node","__wbg_now_2c95c9de01293173","now","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_process_5c1d670bc53614b8","process","__wbg_randomFillSync_ab2cfe79ebbf2740","randomFillSync","__wbg_require_79b1e9274cde3c87","require","__wbg_set_23d69db4e5c66a6e","__wbg_stack_0ed75d68575b0f3c","ptr1","$fb6cc04260f9a749$var$passStringToWasm0","realloc","mem","offset","charCodeAt","slice","ret","stack","__wbindgen_malloc","__wbindgen_realloc","len1","setInt32","__wbg_static_accessor_GLOBAL_0be7472e492ad3e3","$fb6cc04260f9a749$var$isLikeNone","x","__wbg_static_accessor_GLOBAL_THIS_1a6eb482d12c9bfb","__wbg_static_accessor_SELF_1dc398a895c82351","self","__wbg_static_accessor_WINDOW_ae1c80c7eea8d64a","window","__wbg_subarray_46adeb9b86949d12","__wbg_versions_c71aa1626a93e0a1","versions","__wbindgen_copy_to_typed_array","byteOffset","__wbindgen_error_new","__wbindgen_init_externref_table","table","grow","__wbindgen_is_function","__wbindgen_is_object","val","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_memory","__wbindgen_string_new","__wbindgen_throw","Request","fetch","__wbindgen_wasm_module","__wbindgen_start","$f360512a3c30bea8$var$CURRENT_THEME","colorPrefilled","colorSolved","colorDraft","colorHighlightFg","colorHighlightBg1","$f360512a3c30bea8$var$rgba","colorHighlightBg2","colorBg","hex","alpha","r","parseInt","replace","substring","g","b","$f360512a3c30bea8$var$CSS_JS_VAR_MAP","$c02655ebd8daba6d$var$assertIndexInRange","value","desc","Number","isInteger","RangeError","$c02655ebd8daba6d$var$assertCellValueInRange","$c02655ebd8daba6d$var$CellValueSet","bitmap","constructor","initValue","Array","$c02655ebd8daba6d$export$f620cea8bc0acc40","fill","clone","add","delete","has","clear","addAll","hasAll","getUnique","$c02655ebd8daba6d$export$d6e0f5996cc55599","y","linearIndex","squareIndex","Math","floor","fromLinearIndex","$c02655ebd8daba6d$export$f6f0c3fe4ec306ea","coordinate","toChar","fromChar","char","fromNumber","$c02655ebd8daba6d$export$da037351fcfc0321","cells","strict","values","cell","$c02655ebd8daba6d$export$631497b75d3af52d","state","draftNumbers","newPrefilled","PREFILLED","newSolving","SOLVING","hasNumber","SOLVED","addAllDraftNumber","hasDraftNumber","addDraftNumber","removeDraftNumber","fillNumber","$c02655ebd8daba6d$export$3ca9368aae595c1d","createBoardFromString","chars","push","createBoardFromUint8Array","numbers","printBoard","getCellByCoord","coord","getCellsByRow","rowIndex","getCellsByColumn","columnIndex","getCellsBySquare","filter","getCellsByNeighborToCoord","$c02655ebd8daba6d$export$2b07a0b5dadde1bc","validate","arrays","seen","Set","merged","arr","$264de1acac9b7e95$var$drawLine","ctx","x1","y1","x2","y2","style","strokeStyle","color","lineWidth","width","lineCap","beginPath","moveTo","lineTo","stroke","$264de1acac9b7e95$var$getCanvas2DContext","canvas","getContext","$264de1acac9b7e95$var$clearCanvas","clearRect","height","$264de1acac9b7e95$var$VIRTUAL_KB_HTML","$264de1acac9b7e95$var$VirtualKeyboard","cb","container","parent","keyInputCallback","document","createElement","appendChild","setHTMLUnsafe","classList","keyboard","getElementById","keyboardDraftModeSwitch","key","textContent","dataset","addEventListener","ev","preventDefault","stopPropagation","contains","checked","clientWidth","clientHeight","hide","show","boardUi","w","h","getCanvasPosForIdx","MARGIN","config","size","left","top","refreshNumbers","c","remove","debug","gameBoard","availableNumbers","getAvailableNumbersForCell","childNodes","forEach","dom","$264de1acac9b7e95$export$a2ef264ccbaba224","virtualKeyboard","gridCanvas","neighHighlightCanvas","numberHighlightCanvas","numbersCanvas","cursorCanvas","clickCanvas","cursorCoord","focusedNumber","focusedLevel","digitInputCallback","updateConfig","getTheme","getCellSize","$264de1acac9b7e95$var$CANVAS_MARGIN","index","getIdxForCanvasPos","pos","updateBoard","board","redrawNumbers","redrawHighlight","from","children","child","HTMLCanvasElement","removeChild","createCanvas","redrawGrid","rect","getBoundingClientRect","clientX","clientY","updateCursor","updateFocusedNumber","redrawCursor","moveCursor","d","UP","DOWN","LEFT","RIGHT","zIndex","position","ratio","devicePixelRatio","scale","highlightCell","fillStyle","fillRect","highlightDraftCell","boxSize","cursor","highlightCursorNeighbors","highlightNumberNeighbors","highlightNumber","numberCells","map","startPos","endPos","sqrBorderStyle","drawNumber","small","defaultColor","fontSize","textAlign","textBaseline","font","fillText","$95f0dc4e46c5e870$var$HTML_CONTENT","$95f0dc4e46c5e870$export$f3f3f6c0124f08de","game","pageDom","refreshBanner","boardDom","puzzleBoard","handleNumberInput","bind","quickDraftBtn","recalculateDraftNumbers","newGameBtn","confirm","location","reload","saveBtn","loadBtn","updateSaveLoadBtnState","savedPuzzleBoard","saveState","showNotification","loadState","handleKeyDownEvent","$95f0dc4e46c5e870$var$keyCodeToDirection","handleDigitKeyEvent","charAt","shiftKey","draftMode","toggleDraftNumber","fillInNumber","handleOutOfBoundClick","msg","innerText","setTimeout","once","timerDom","mistakesDom","remainingDom","$95f0dc4e46c5e870$var$secondsToHumanReadable","seconds","minutes","remainingSeconds","formattedMinutes","String","padStart","formattedSeconds","getElapsedSeconds","mistakes","getEmptyCellsCount","$7855482cf5bb294a$export$c6b206237a2995ae","createFromBoard","neighColors","takeAction","action","a","type","reasonString","REMOVE_DRAFT_NUMBER","FILL_IN_NUMBER","takeActions","actions","$7855482cf5bb294a$export$a3896fdc4a7ed91d","addAction","targetCell","sourceCell","valueToRemove","$ff40705a305463f8$export$985739bfa5723e08","answerBoard","startTime","endTime","answer","puzzle","alert","isAllCorrect","cnt","end","round","$c283b26f8307214a$var$waitForDifficultyInput","Promise","resolve","getElementsByClassName","btn","isNaN","$c283b26f8307214a$var$switchPage","to","parentElement","$c283b26f8307214a$var$main","ptr0","len0","$f360512a3c30bea8$var$setTheme","name","cssProp","jsProp","cssVar","getComputedStyle","body","getPropertyValue","documentElement","setProperty","initPageDom","loadingPageDom","gamePageDom","clues","catch","init_panic_hook","puzzleArr","generate","answerArr","$fb6cc04260f9a749$export$732a70cc09cae898","fast_solve","$fb6cc04260f9a749$var$takeFromExternrefTable0","__externref_table_dealloc","controller"],"version":3,"file":"index.42eb7006.js.map"}